var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AuthController.html",[0,1.846,1,2.053]],["body/controllers/AuthController.html",[0,1.744,1,2.689,2,1.581,3,0.29,4,0.251,5,0.251,6,2.511,7,2.511,8,3.008,9,0.33,10,1.545,11,2.466,12,3.482,13,3.482,14,3.008,15,3.258,16,1.545,17,0.032,18,3.008,19,0.781,20,3.008,21,1.545,22,1.545,23,0.517,24,1.545,25,1.545,26,2.083,27,2.511,28,2.694,29,3.008,30,3.008,31,0.673,32,2.511,33,2.511,34,2.511,35,2.511,36,0.87,37,2.517,38,2.511,39,2.511,40,1.939,41,2.511,42,2.511,43,1.744,44,2.184,45,2.511,46,3.008,47,0.29,48,0.066,49,2.511,50,3.008,51,3.482,52,3.008,53,1.545,54,3.008,55,3.008,56,3.008,57,3.008,58,0.015,59,0.021,60,0.015]],["title/classes/AuthCredentialsDto.html",[15,1.846,48,0.07]],["body/classes/AuthCredentialsDto.html",[3,0.323,4,0.28,5,0.28,9,0.369,15,2.605,16,1.665,17,0.032,19,0.841,23,0.557,31,0.628,47,0.323,48,0.099,58,0.017,59,0.022,60,0.017,61,1.054,62,4.23,63,2.801,64,1.665,65,2.041,66,2.663,67,1.7,68,2.436,69,3.928,70,2.937,71,3.356,72,3.356,73,3.356,74,3.356,75,2.663,76,3.678,77,2.801,78,2.801,79,3.678,80,1.609,81,2.605,82,2.801,83,2.897,84,2.897,85,2.801,86,2.801,87,2.801]],["title/modules/AuthModule.html",[88,1.283,89,1.846]],["body/modules/AuthModule.html",[1,3.053,2,2.161,3,0.284,4,0.246,5,0.246,17,0.032,31,0.724,36,0.852,37,2.935,38,2.46,47,0.284,48,0.065,58,0.015,59,0.02,60,0.015,88,1.908,89,3.486,90,1.413,91,1.413,92,1.708,93,1.708,94,1.413,95,2.745,96,1.708,97,2.46,98,2.46,99,2.46,100,2.935,101,3.237,102,2.384,103,1.708,104,1.708,105,2.947,106,3.053,107,2.947,108,1.9,109,2.947,110,2.139,111,3.72,112,3.954,113,1.9,114,2.46,115,2.947,116,2.947,117,2.947,118,2.947,119,2.139,120,2.947,121,2.46,122,2.947,123,2.46]],["title/injectables/AuthService.html",[37,1.674,124,1.086]],["body/injectables/AuthService.html",[3,0.21,4,0.182,5,0.182,9,0.239,10,1.223,11,2.415,12,2.756,13,2.756,15,2.577,17,0.032,19,0.832,21,1.647,22,1.647,23,0.551,24,1.647,25,1.476,26,2.024,27,2.756,28,2.289,31,0.666,36,0.63,37,1.735,39,1.82,40,1.405,41,1.82,42,1.82,43,1.264,44,2.397,45,1.82,47,0.21,48,0.048,53,1.476,58,0.011,59,0.016,60,0.011,65,1.791,66,1.146,67,0.685,110,1.582,124,1.126,125,1.146,126,1.82,127,2.768,128,3.301,129,2.128,130,2.18,131,2.131,132,3.985,133,4.445,134,2.18,135,3.301,136,3.301,137,2.913,138,2.18,139,3.326,140,3.301,141,2.18,142,3.301,143,2.18,144,2.397,145,3.985,146,1.82,147,1.82,148,2.502,149,1.152,150,2.336,151,2.18,152,1.582,153,3.301,154,2.756,155,3.301,156,2.18,157,2.397,158,1.735,159,3.301,160,2.18,161,1.82,162,2.756,163,2.18]],["title/classes/CreateTaskDto.html",[48,0.07,164,1.674]],["body/classes/CreateTaskDto.html",[3,0.379,4,0.328,5,0.328,9,0.432,16,1.846,17,0.031,19,0.933,23,0.617,31,0.487,47,0.379,48,0.11,58,0.019,59,0.025,60,0.019,61,1.235,64,1.846,67,1.806,75,3.119,80,1.885,164,2.619,165,4.566,166,3.282,167,2.875,168,3.971,169,3.932,170,3.932]],["title/classes/CreateUserDto.html",[28,1.527,48,0.07]],["body/classes/CreateUserDto.html",[3,0.303,4,0.263,5,0.263,9,0.346,16,1.817,17,0.032,19,0.918,23,0.608,28,2.064,31,0.608,47,0.303,48,0.095,58,0.016,59,0.021,60,0.016,61,0.989,64,1.595,65,1.976,66,2.578,67,1.79,68,2.286,69,3.827,70,2.843,75,2.771,76,3.827,77,2.629,78,2.629,79,3.561,80,1.51,81,2.496,82,2.629,83,2.775,84,3.162,85,2.629,86,2.629,87,3.594,171,4.401,172,2.629,173,3.561,174,3.15,175,3.15,176,3.15,177,3.15,178,3.15,179,3.15]],["title/classes/FindUserByEmailDto.html",[48,0.07,180,1.846]],["body/classes/FindUserByEmailDto.html",[3,0.353,4,0.306,5,0.306,9,0.403,16,1.359,17,0.032,19,0.687,23,0.454,31,0.454,47,0.51,48,0.105,58,0.018,59,0.024,60,0.018,61,1.152,64,1.765,65,2.257,67,1.496,68,2.662,69,3.459,70,3.068,75,2.504,76,3.459,79,3.459,80,1.758,81,2.762,148,2.284,149,1.378,180,2.762,181,3.459,182,2.662,183,3.667,184,3.977,185,3.061,186,3.061,187,3.061,188,3.061,189,3.061]],["title/classes/GetTasksFilterDto.html",[48,0.07,190,1.846]],["body/classes/GetTasksFilterDto.html",[3,0.358,4,0.31,5,0.31,9,0.408,16,1.78,17,0.031,19,0.899,23,0.595,31,0.595,47,0.358,48,0.106,58,0.018,59,0.024,60,0.018,61,1.166,64,1.78,67,1.509,75,2.525,80,1.78,190,2.785,191,4.445,192,3.087,193,3.1,194,4.445,195,3.433,196,3.714,197,3.714,198,3.087,199,3.714,200,3.714,201,5.325,202,3.1,203,2.394,204,2.394,205,3.1]],["title/injectables/JwtAuthGuard.html",[124,1.086,206,2.053]],["body/injectables/JwtAuthGuard.html",[3,0.429,4,0.372,5,0.372,17,0.031,31,0.667,36,1.288,47,0.429,48,0.098,58,0.022,59,0.027,60,0.022,108,2.872,124,1.836,125,2.342,206,3.47,207,3.719,208,4.455,209,2.342,210,4.455]],["title/interfaces/JwtPayload.html",[137,1.846,211,1.846]],["body/interfaces/JwtPayload.html",[3,0.408,4,0.354,5,0.354,9,0.465,17,0.031,23,0.647,47,0.408,58,0.021,59,0.026,60,0.021,64,1.935,65,2.38,67,1.778,137,3.027,152,2.832,211,2.457,212,3.076,213,3.076,214,3.538,215,2.713]],["title/interfaces/JwtResponse.html",[43,1.846,211,1.846]],["body/interfaces/JwtResponse.html",[3,0.427,4,0.37,5,0.37,9,0.487,17,0.03,23,0.549,43,3.111,47,0.427,58,0.022,59,0.027,60,0.022,64,1.988,67,1.813,162,5.008,211,2.569,212,3.217,213,3.217,216,3.7]],["title/injectables/JwtStrategy.html",[101,1.846,124,1.086]],["body/injectables/JwtStrategy.html",[3,0.279,4,0.242,5,0.242,9,0.318,10,1.506,11,2.06,17,0.032,19,0.761,21,1.506,22,1.506,23,0.504,24,1.506,25,1.074,26,1.637,31,0.707,36,0.838,44,2.104,47,0.279,48,0.064,53,1.074,58,0.014,59,0.02,60,0.014,65,1.637,101,2.356,108,1.868,111,4.032,113,1.868,119,2.104,124,1.386,125,1.523,127,2.356,129,2.62,131,2.734,137,2.949,139,3.393,146,2.419,147,2.419,148,1.948,149,1.357,150,1.523,209,1.523,217,2.419,218,4.064,219,2.898,220,2.898,221,4.064,222,2.898,223,2.898,224,2.898,225,2.419,226,2.898,227,1.68,228,2.898,229,2.898,230,2.898,231,2.898,232,2.898,233,2.419,234,2.898,235,2.898,236,2.898]],["title/classes/Task.html",[48,0.07,237,1.283]],["body/classes/Task.html",[3,0.291,4,0.252,5,0.252,9,0.332,16,2.015,17,0.032,19,1.018,23,0.674,31,0.594,47,0.291,48,0.066,58,0.015,59,0.021,60,0.015,61,0.948,64,1.549,67,1.626,149,1.7,152,2.299,167,2.521,168,3.482,195,3.092,198,2.781,203,1.946,204,1.946,209,2.198,215,2.004,227,1.75,233,3.49,237,1.684,238,2.52,239,4.004,240,4.815,241,3.019,242,4.004,243,3.019,244,3.019,245,3.019,246,3.019,247,2.52,248,3.49,249,3.019,250,2.52,251,4.181,252,1.587,253,3.019,254,3.019]],["title/classes/TaskRepository.html",[48,0.07,255,1.846]],["body/classes/TaskRepository.html",[3,0.273,4,0.236,5,0.236,9,0.311,10,1.481,11,2.419,17,0.032,19,0.749,21,1.481,22,1.481,23,0.495,24,1.481,25,1.481,26,2.029,31,0.624,47,0.273,48,0.062,53,1.481,58,0.014,59,0.02,60,0.014,61,0.889,148,1.917,149,1.798,150,1.489,152,2.222,158,1.489,164,2.978,167,2.102,168,2.903,209,2.102,215,2.222,227,1.642,237,2.029,252,1.489,255,2.318,256,2.364,257,3.365,258,4.635,259,4.635,260,2.832,261,2.832,262,2.832,263,2.832,264,2.364,265,1.826,266,1.642,267,2.056,268,2.832,269,2.832,270,2.832,271,2.364,272,2.832,273,2.364]],["title/classes/TaskSubscriber.html",[48,0.07,274,2.312]],["body/classes/TaskSubscriber.html",[3,0.342,4,0.296,5,0.296,9,0.39,10,1.727,17,0.032,19,0.873,21,1.314,22,1.314,23,0.44,24,1.314,25,1.727,31,0.645,47,0.342,48,0.078,53,1.314,58,0.018,59,0.023,60,0.018,61,1.114,198,2.056,203,2.287,204,2.287,237,1.878,252,1.865,265,2.287,274,3.385,275,2.961,276,4.663,277,5.208,278,4.663,279,5.532,280,4.663,281,5.532,282,3.548,283,3.548,284,3.385,285,3.548,286,4.663,287,3.548,288,3.548]],["title/controllers/TasksController.html",[0,1.846,289,2.053]],["body/controllers/TasksController.html",[0,1.151,2,1.044,3,0.191,4,0.166,5,0.166,7,1.658,9,0.218,10,1.139,16,1.697,17,0.032,19,0.857,21,1.697,22,1.697,23,0.567,24,1.697,25,1.697,26,2.205,31,0.664,32,2.566,33,3.14,34,1.658,35,1.658,36,0.574,47,0.191,48,0.044,49,1.658,51,3.14,53,1.697,58,0.01,59,0.015,60,0.01,149,1.771,152,2.322,164,2.546,190,2.808,192,1.782,206,1.28,215,2.568,227,1.151,237,1.238,265,1.28,266,1.151,267,1.442,289,1.982,290,1.658,291,3.14,292,2.566,293,3.14,294,2.566,295,3.14,296,1.658,297,1.986,298,1.986,299,1.658,300,3.074,301,1.986,302,1.658,303,3.074,304,1.986,305,1.658,306,1.986,307,1.986,308,1.658,309,3.025,310,1.986,311,1.986,312,1.986,313,1.986,314,1.986,315,1.658,316,4.234,317,1.986,318,1.977,319,1.658,320,1.986,321,1.658,322,1.658,323,1.658,324,1.658,325,3.074,326,1.986,327,1.986,328,1.986,329,1.986,330,1.986,331,1.986,332,3.074,333,1.986,334,1.986,335,1.986,336,1.986,337,1.986,338,1.986]],["title/modules/TasksModule.html",[88,1.283,339,1.846]],["body/modules/TasksModule.html",[2,2.471,3,0.346,4,0.3,5,0.3,17,0.032,31,0.715,36,1.039,47,0.346,48,0.079,58,0.018,59,0.023,60,0.018,88,2.111,90,1.721,91,1.721,92,2.082,93,2.082,94,1.721,95,3.037,96,2.082,102,2.725,103,2.082,104,2.082,106,2.315,255,2.082,289,3.377,318,3.111,319,2.998,339,3.431,340,2.998,341,2.998,342,3.591,343,2.607,344,1.888,345,2.998,346,3.591,347,3.591]],["title/injectables/TasksService.html",[124,1.086,318,1.674]],["body/injectables/TasksService.html",[3,0.174,4,0.15,5,0.15,9,0.198,10,1.055,11,2.518,17,0.032,19,0.871,21,1.722,22,1.722,23,0.576,24,1.722,25,1.62,26,2.144,31,0.626,36,0.521,47,0.174,48,0.04,53,1.487,58,0.009,59,0.014,60,0.009,124,0.971,125,0.947,127,1.044,129,1.836,148,2.334,149,1.746,150,2.444,152,2.096,157,2.067,158,1.497,164,2.444,167,0.947,190,2.695,192,2.048,194,3.881,195,2.588,215,2.491,227,1.044,237,1.962,255,2.695,265,1.161,266,1.044,267,1.307,291,2.949,292,2.377,293,2.949,294,2.377,295,2.949,296,1.504,299,2.377,302,1.504,305,2.377,308,1.504,309,2.927,315,1.504,318,1.497,321,1.504,322,1.504,323,1.504,324,1.504,344,0.947,345,1.504,348,1.504,349,1.801,350,1.801,351,1.801,352,1.801,353,1.801,354,1.801,355,1.801,356,3.532,357,1.504,358,1.801,359,1.801,360,1.801,361,1.801,362,1.801,363,1.801,364,1.801,365,1.801,366,1.801,367,2.848,368,1.801,369,1.801,370,1.801,371,1.801,372,1.504]],["title/classes/UpdateTaskStatusDto.html",[48,0.07,309,1.846]],["body/classes/UpdateTaskStatusDto.html",[3,0.386,4,0.334,5,0.334,9,0.44,16,1.483,17,0.031,19,0.75,23,0.496,31,0.625,47,0.386,48,0.111,58,0.02,59,0.025,60,0.02,61,1.258,64,1.867,75,2.649,80,1.919,195,3.556,198,3.198,202,3.343,203,2.581,204,2.581,205,3.343,237,2.031,309,2.922,373,4.208,374,3.343,375,4.004,376,4.004]],["title/classes/User.html",[48,0.07,149,0.921]],["body/classes/User.html",[3,0.282,4,0.244,5,0.244,9,0.322,16,2.064,17,0.032,19,1.043,23,0.69,31,0.507,47,0.282,48,0.064,58,0.014,59,0.02,60,0.014,61,0.919,64,1.516,65,1.901,66,2.48,67,1.833,149,1.184,152,2.262,173,3.426,192,2.736,209,2.151,215,1.962,237,2.166,239,3.939,240,4.949,242,3.939,247,2.444,248,3.416,250,2.444,252,1.539,271,2.444,377,2.444,378,3.939,379,2.927,380,2.927,381,2.927,382,2.927,383,2.927,384,4.093,385,2.927,386,2.927,387,2.927,388,4.093,389,2.927,390,2.927,391,2.927]],["title/classes/UserRepository.html",[48,0.07,392,1.846]],["body/classes/UserRepository.html",[3,0.219,4,0.189,5,0.189,9,0.249,10,1.261,11,2.443,17,0.032,19,0.765,21,1.513,22,1.513,23,0.506,24,1.513,25,1.513,26,2.056,28,2.446,31,0.632,36,0.657,40,1.464,47,0.328,48,0.05,53,1.513,58,0.011,59,0.017,60,0.011,61,0.713,65,1.828,66,1.79,67,1.603,127,2.368,144,2.471,148,2.33,149,1.53,150,2.385,154,1.896,157,2.471,158,2.147,161,1.896,173,2.471,180,2.958,209,1.79,252,1.194,257,2.965,264,1.896,266,1.316,273,1.896,378,3.788,392,1.974,393,1.648,394,2.842,395,2.842,396,3.405,397,2.842,398,2.271,399,2.842,400,2.271,401,3.405,402,2.271,403,2.271,404,3.405,405,1.896,406,1.896,407,1.896,408,2.471,409,1.896,410,2.271,411,2.271,412,3.405,413,2.271,414,2.271,415,2.271,416,2.271,417,2.271,418,2.271,419,2.271,420,2.271,421,2.271,422,2.271,423,2.271]],["title/modules/UsersModule.html",[88,1.283,100,1.674]],["body/modules/UsersModule.html",[2,1.857,3,0.34,4,0.295,5,0.295,17,0.032,31,0.684,36,1.022,47,0.34,48,0.078,58,0.017,59,0.023,60,0.017,88,2.094,90,1.694,91,1.694,92,2.048,93,2.048,94,1.694,95,3.013,96,3.013,100,3.157,102,2.696,103,2.048,104,2.048,106,2.277,131,3.026,343,2.565,344,1.857,392,2.048,424,2.949,425,2.949,426,2.949,427,3.533,428,2.949,429,3.533,430,3.533]],["title/injectables/UsersService.html",[124,1.086,131,1.527]],["body/injectables/UsersService.html",[3,0.287,4,0.248,5,0.248,9,0.327,10,1.534,11,2.458,17,0.032,19,0.892,21,1.764,22,1.764,23,0.59,24,1.764,25,1.534,26,2.074,28,2.594,31,0.694,36,0.861,40,1.919,47,0.287,48,0.066,53,1.534,58,0.015,59,0.02,60,0.015,124,1.412,125,1.565,127,1.726,129,2.67,131,1.985,149,1.198,180,3.136,266,1.726,344,1.565,357,2.485,392,3.247,394,3.457,395,3.457,397,3.457,399,3.457,405,2.485,406,2.485,407,2.485,428,2.485,431,2.485,432,2.977,433,2.977,434,2.977,435,2.977,436,2.977,437,2.977,438,2.977]],["title/modules/V1Module.html",[88,1.283,439,1.846]],["body/modules/V1Module.html",[3,0.259,4,0.224,5,0.224,10,0.994,17,0.032,19,0.502,21,0.994,22,0.994,23,0.333,24,0.994,25,0.994,31,0.739,36,0.776,47,0.259,48,0.059,58,0.013,59,0.019,60,0.013,88,1.813,89,3.139,90,1.286,91,1.286,92,1.556,93,1.556,94,1.286,95,1.556,96,1.556,100,2.847,102,2.231,103,1.556,104,1.556,106,2.9,111,3.568,112,3.213,113,1.73,114,2.24,121,2.24,123,2.24,284,2.794,339,3.139,343,1.948,344,1.411,439,3.418,440,2.24,441,2.684,442,2.684,443,2.684,444,3.849,445,4.915,446,2.684,447,2.684,448,3.213,449,3.213,450,3.849,451,2.684,452,3.849,453,2.684,454,2.684,455,2.684,456,3.849,457,2.24,458,2.24,459,2.684,460,2.684,461,2.684,462,2.684,463,2.684,464,2.684]],["title/coverage.html",[465,3.149]],["body/coverage.html",[0,1.885,1,1.378,5,0.178,6,1.784,15,1.239,17,0.032,23,0.265,28,1.024,37,1.123,43,1.239,48,0.125,58,0.011,59,0.016,60,0.011,62,1.784,63,1.784,70,1.885,81,1.885,83,1.378,84,1.378,94,1.024,101,1.239,124,1.615,126,1.784,131,1.024,137,1.239,149,1.272,158,1.123,164,1.123,165,1.784,166,1.784,171,1.784,172,1.784,180,1.239,181,2.858,182,2.858,190,1.239,191,1.784,192,1.239,193,1.784,206,1.378,207,1.784,211,1.885,213,2.361,214,1.784,216,1.784,217,1.784,237,1.31,238,1.784,255,1.239,256,1.784,274,1.551,275,1.784,289,1.378,290,1.784,309,1.239,318,1.123,325,1.551,348,1.784,372,5.343,373,1.784,374,1.784,377,1.784,392,1.239,393,2.361,408,1.551,431,1.784,465,1.551,466,2.137,467,2.137,468,2.137,469,2.715,470,5.883,471,5.984,472,2.715,473,5.343,474,2.137,475,1.784,476,1.784,477,3.937,478,3.252,479,3.252,480,3.937,481,1.784,482,1.784,483,2.715,484,1.784,485,1.784,486,3.286,487,1.784,488,1.784,489,1.784,490,1.784,491,2.137,492,2.137,493,2.137]],["title/dependencies.html",[91,1.835,494,2.665]],["body/dependencies.html",[17,0.032,36,1.005,48,0.101,58,0.017,59,0.023,60,0.017,80,1.666,91,1.666,108,2.241,110,2.524,113,2.241,119,2.524,144,2.524,225,3.841,252,1.827,344,1.827,448,2.902,449,2.902,457,2.902,458,2.902,495,5.157,496,3.477,497,3.477,498,5.157,499,3.477,500,3.841,501,3.477,502,3.477,503,3.477,504,3.477,505,3.477,506,3.477,507,3.477,508,3.477,509,3.477,510,3.477,511,3.477,512,3.477,513,3.477,514,3.477,515,3.477,516,3.477,517,3.477,518,3.477,519,3.477,520,3.477,521,3.477,522,3.477,523,3.477,524,3.477,525,3.477,526,3.477]],["title/miscellaneous/enumerations.html",[527,1.401,528,3.196]],["body/miscellaneous/enumerations.html",[9,0.494,17,0.03,58,0.022,59,0.027,60,0.022,198,3.14,527,2.366,528,3.757,529,4.501,530,5.417,531,4.501,532,4.522,533,4.851,534,5.417,535,5.417]],["title/miscellaneous/functions.html",[527,1.401,536,3.196]],["body/miscellaneous/functions.html",[9,0.53,17,0.028,58,0.024,59,0.028,60,0.024,94,2.868,490,4.028,527,2.536,536,4.028,537,4.825]],["title/index.html",[9,0.293,538,2.665,539,2.665]],["body/index.html",[4,0.272,17,0.031,58,0.016,59,0.022,60,0.016,167,1.711,257,2.363,465,2.363,532,2.718,540,3.256,541,3.256,542,4.403,543,3.256,544,3.256,545,3.256,546,2.718,547,3.256,548,3.256,549,3.256,550,3.256,551,3.256,552,4.99,553,3.256,554,3.256,555,3.256,556,5.885,557,3.256,558,2.718,559,3.256,560,5.756,561,3.256,562,3.256,563,4.403,564,3.256,565,3.256,566,3.256,567,3.256,568,4.403,569,4.403,570,3.256,571,3.256,572,3.256,573,4.403,574,4.403,575,3.256,576,3.256,577,3.256,578,3.256,579,2.718,580,3.256,581,3.256,582,3.256,583,3.256,584,3.256,585,3.256,586,3.256,587,3.256,588,3.256,589,3.256,590,3.256,591,3.256,592,3.256,593,3.256,594,3.256,595,3.256,596,3.256,597,3.256]],["title/modules.html",[90,2.08]],["body/modules.html",[17,0.027,58,0.022,59,0.027,60,0.022,89,2.609,90,2.157,100,2.366,339,2.609,439,2.609,579,5.034,598,6.03,599,6.03,600,6.03]],["title/overview.html",[601,3.622]],["body/overview.html",[2,1.778,17,0.031,37,2.674,58,0.017,59,0.022,60,0.017,61,1.062,88,1.362,89,3.544,90,1.621,91,1.621,92,1.961,93,1.961,94,1.621,95,1.961,96,1.961,97,2.823,98,2.823,99,2.823,100,3.123,101,2.949,102,2.619,103,1.961,104,1.961,125,1.778,131,2.848,212,2.455,318,2.674,339,3.279,340,2.823,341,2.823,424,2.823,425,2.823,426,2.823,439,3.5,440,2.823,601,2.823,602,3.382,603,4.518,604,3.382,605,3.382]],["title/miscellaneous/variables.html",[527,1.401,606,3.196]],["body/miscellaneous/variables.html",[9,0.248,11,0.991,17,0.032,23,0.655,26,0.91,53,1.256,58,0.011,59,0.017,60,0.011,65,1.366,66,1.187,67,1.6,70,2.623,81,2.623,83,2.186,84,2.186,148,2.169,149,1.309,150,1.187,158,2.14,167,1.187,181,1.64,182,2.956,184,2.831,185,1.886,186,1.886,187,1.886,188,1.886,189,2.831,215,1.083,284,1.64,325,2.462,393,1.64,408,2.462,409,1.886,439,1.31,469,1.886,472,1.886,475,1.886,476,2.831,481,1.886,482,2.831,483,1.886,484,2.831,485,3.399,486,1.886,487,2.831,488,2.831,489,2.831,500,1.886,527,1.187,533,4.964,546,1.886,558,3.399,606,1.886,607,4.072,608,3.392,609,2.259,610,3.392,611,3.392,612,2.259,613,3.392,614,2.259,615,5.946,616,4.072,617,2.259,618,2.259,619,2.259,620,2.259,621,2.259,622,3.392,623,2.259,624,2.259,625,2.259,626,2.259,627,3.392,628,3.392,629,2.259,630,2.259,631,2.259,632,2.259,633,3.392,634,2.259,635,2.259,636,2.259,637,2.259,638,2.259,639,2.259,640,2.259,641,2.259,642,2.259,643,2.259,644,2.259,645,2.259,646,2.259,647,2.259,648,2.259,649,2.259,650,2.259]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":372,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["1.7.4",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":605,"title":{},"body":{"overview.html":{}}}],["2",{"_index":603,"title":{},"body":{"overview.html":{}}}],["23505",{"_index":409,"title":{},"body":{"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["3.23.3",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":602,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":604,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["9.]+@[a",{"_index":185,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["9]+\\.[a",{"_index":186,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtResponse.html":{}}}],["addbearerauth",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":458,"title":{},"body":{"modules/V1Module.html":{},"dependencies.html":{}}}],["admin/**/*.entity.js",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin_user_entities_entries",{"_index":487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":421,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":580,"title":{},"body":{"index.html":{}}}],["angular",{"_index":551,"title":{},"body":{"index.html":{}}}],["api",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":558,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.init",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.setglobalprefix('api/v1",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appfactory",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":548,"title":{},"body":{"index.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":8,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":38,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":455,"title":{},"body":{"modules/V1Module.html":{}}}],["auth/decorators/get",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{}}}],["auth/jwt.guard",{"_index":320,"title":{},"body":{"controllers/TasksController.html":{}}}],["authcontroller",{"_index":1,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentials",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcredentialsdto",{"_index":15,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":208,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":210,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":89,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":590,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":37,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":581,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":239,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":413,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":423,"title":{},"body":{"classes/UserRepository.html":{}}}],["beforeinsert",{"_index":278,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["beforeinsert(event",{"_index":280,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["body",{"_index":33,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["bootstrap",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":600,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":598,"title":{},"body":{"modules.html":{}}}],["build",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":543,"title":{},"body":{"index.html":{}}}],["buildv1documentation",{"_index":484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildv1documentation(app",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":417,"title":{},"body":{"classes/UserRepository.html":{}}}],["class",{"_index":48,"title":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":61,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":340,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":341,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":424,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":425,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":426,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_v1module",{"_index":440,"title":{},"body":{"modules/V1Module.html":{},"overview.html":{}}}],["cluster_v1module_imports",{"_index":441,"title":{},"body":{"modules/V1Module.html":{}}}],["column",{"_index":240,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["compression",{"_index":448,"title":{},"body":{"modules/V1Module.html":{},"dependencies.html":{}}}],["config/database.config",{"_index":453,"title":{},"body":{"modules/V1Module.html":{}}}],["configmodule",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["configmodule.forroot",{"_index":459,"title":{},"body":{"modules/V1Module.html":{}}}],["configservice",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/V1Module.html":{}}}],["configservice.get('database",{"_index":462,"title":{},"body":{"modules/V1Module.html":{}}}],["configservice.get('jwt",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt').secret",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configure",{"_index":443,"title":{},"body":{"modules/V1Module.html":{}}}],["configure(consumer",{"_index":444,"title":{},"body":{"modules/V1Module.html":{}}}],["conflictexception",{"_index":403,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('email",{"_index":420,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindUserByEmailDto.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":349,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":447,"title":{},"body":{"modules/V1Module.html":{}}}],["consumer.apply(compression",{"_index":463,"title":{},"body":{"modules/V1Module.html":{}}}],["consumer.apply(helmet",{"_index":464,"title":{},"body":{"modules/V1Module.html":{}}}],["controller",{"_index":0,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core/validations/email",{"_index":82,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["core/validations/password",{"_index":85,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["coverage",{"_index":465,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaccesstoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["createaccesstoken(payload",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["createapp",{"_index":482,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["createparamdecorator((_",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":291,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(createtaskdto",{"_index":296,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskbyuser",{"_index":258,"title":{},"body":{"classes/TaskRepository.html":{}}}],["createtaskbyuser(createtaskdto",{"_index":260,"title":{},"body":{"classes/TaskRepository.html":{}}}],["createtaskdto",{"_index":164,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["createuser",{"_index":394,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":397,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":28,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentials.dto.ts",{"_index":63,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:24",{"_index":71,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:34",{"_index":74,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":452,"title":{},"body":{"modules/V1Module.html":{}}}],["declarations",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{}}}],["default",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultadminmodule",{"_index":456,"title":{},"body":{"modules/V1Module.html":{}}}],["defaultstrategy",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["delete",{"_index":313,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":300,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted",{"_index":369,"title":{},"body":{"injectables/TasksService.html":{}}}],["deleted.affected",{"_index":371,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetaskbyid",{"_index":292,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(@param('id",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetaskbyid(id",{"_index":299,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":91,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":167,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":559,"title":{},"body":{"index.html":{}}}],["document",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/auth",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":266,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["dto/find",{"_index":406,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["dto/get",{"_index":323,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/update",{"_index":321,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e2e",{"_index":570,"title":{},"body":{"index.html":{}}}],["eager",{"_index":248,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["efficient",{"_index":544,"title":{},"body":{"index.html":{}}}],["email",{"_index":65,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["email.dto",{"_index":407,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["email.dto.ts",{"_index":182,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["email.dto.ts:17",{"_index":183,"title":{},"body":{"classes/FindUserByEmailDto.html":{}}}],["email_validation_message",{"_index":70,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["email_validation_regex",{"_index":81,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities_entries",{"_index":488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":250,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entity('tasks",{"_index":253,"title":{},"body":{"classes/Task.html":{}}}],["entity('users",{"_index":390,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":264,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":268,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":410,"title":{},"body":{"classes/UserRepository.html":{}}}],["entitysubscriberinterface",{"_index":277,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["enumerations",{"_index":528,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/task",{"_index":203,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["error",{"_index":418,"title":{},"body":{"classes/UserRepository.html":{}}}],["event",{"_index":283,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["event.entity.status",{"_index":287,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["eventsubscriber",{"_index":286,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["executioncontext",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":422,"title":{},"body":{"classes/UserRepository.html":{}}}],["export",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["exports",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["express",{"_index":500,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["expressadapter(server",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":209,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{}}}],["filter.dto",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":193,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":200,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:15",{"_index":197,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["findonebyidanduser",{"_index":259,"title":{},"body":{"classes/TaskRepository.html":{}}}],["findonebyidanduser(id",{"_index":262,"title":{},"body":{"classes/TaskRepository.html":{}}}],["finduserbyemail",{"_index":395,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(finduserbyemaildto",{"_index":399,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["finduserbyemaildto",{"_index":180,"title":{"classes/FindUserByEmailDto.html":{}},"body":{"classes/FindUserByEmailDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["framework",{"_index":542,"title":{},"body":{"index.html":{}}}],["function",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":536,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":303,"title":{},"body":{"controllers/TasksController.html":{}}}],["get()@usepipes(validationpipe",{"_index":306,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid",{"_index":293,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(id",{"_index":302,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":294,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(@query",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettasks(gettasksfilterdto",{"_index":305,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksfilterdto",{"_index":190,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":538,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":325,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":576,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":396,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":401,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":549,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":449,"title":{},"body":{"modules/V1Module.html":{},"dependencies.html":{}}}],["here",{"_index":587,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":594,"title":{},"body":{"index.html":{}}}],["id",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":276,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["import",{"_index":31,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["imports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}}}],["in_progress",{"_index":534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["inject",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["injectable",{"_index":124,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":357,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(taskrepository",{"_index":358,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["insertevent",{"_index":281,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["inspired",{"_index":550,"title":{},"body":{"index.html":{}}}],["installation",{"_index":555,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":557,"title":{},"body":{"index.html":{}}}],["interface",{"_index":211,"title":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":212,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":404,"title":{},"body":{"classes/UserRepository.html":{}}}],["invalid",{"_index":189,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["isenum",{"_index":202,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":205,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":75,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty()@isenum(taskstatus",{"_index":375,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty()@isstring()@matches(email_validation_regex",{"_index":68,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["isnotempty()@isstring()@minlength(4)@maxlength(20",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@maxlength(20)@matches(password_validation_regex",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":201,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isenum(taskstatus",{"_index":199,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":196,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isstring",{"_index":76,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@matches(password_validation_regex",{"_index":72,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isvalidpassword",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["join",{"_index":583,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":206,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":450,"title":{},"body":{"modules/V1Module.html":{}}}],["jwtfromrequest",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":137,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtresponse",{"_index":43,"title":{"interfaces/JwtResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["jwtsertive",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":101,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":591,"title":{},"body":{"index.html":{}}}],["legend",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["license",{"_index":597,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":574,"title":{},"body":{"index.html":{}}}],["listento",{"_index":279,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["load",{"_index":460,"title":{},"body":{"modules/V1Module.html":{}}}],["management",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":251,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":246,"title":{},"body":{"classes/Task.html":{}}}],["matches",{"_index":79,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["matching",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":78,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":87,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":69,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["metadata",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["middlewareconsumer",{"_index":445,"title":{},"body":{"modules/V1Module.html":{}}}],["minlength",{"_index":77,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":86,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":527,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":573,"title":{},"body":{"index.html":{}}}],["mode",{"_index":563,"title":{},"body":{"index.html":{}}}],["module",{"_index":88,"title":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["modules",{"_index":90,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":586,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":592,"title":{},"body":{"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["nest",{"_index":552,"title":{},"body":{"index.html":{}}}],["nestfactorystatic",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestframework",{"_index":596,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":457,"title":{},"body":{"modules/V1Module.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":344,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":541,"title":{},"body":{"index.html":{}}}],["node_modules/nestjs",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":356,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":556,"title":{},"body":{"index.html":{}}}],["number",{"_index":215,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":388,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":383,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":532,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":24,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["options",{"_index":485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["overview",{"_index":601,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":494,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":312,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["parseint(error.code",{"_index":419,"title":{},"body":{"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":316,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":66,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["password_validation_message",{"_index":84,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_validation_message})@isnotempty",{"_index":73,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["password_validation_regex",{"_index":83,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":314,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status')@usepipes(validationpipe",{"_index":310,"title":{},"body":{"controllers/TasksController.html":{}}}],["path.join(__dirname",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":214,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":584,"title":{},"body":{"index.html":{}}}],["post",{"_index":32,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('signin",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin')@usepipes(validationpipe",{"_index":18,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@usepipes(validationpipe",{"_index":29,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(validationpipe",{"_index":297,"title":{},"body":{"controllers/TasksController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":242,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":565,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":540,"title":{},"body":{"index.html":{}}}],["project",{"_index":575,"title":{},"body":{"index.html":{}}}],["promise",{"_index":26,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":64,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"classes/Task.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{}}}],["providers",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["query",{"_index":315,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["query.andwhere('(title",{"_index":361,"title":{},"body":{"injectables/TasksService.html":{}}}],["query.andwhere('status",{"_index":360,"title":{},"body":{"injectables/TasksService.html":{}}}],["query.getmany",{"_index":362,"title":{},"body":{"injectables/TasksService.html":{}}}],["read",{"_index":585,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":257,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["response.interface",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.interface.ts",{"_index":216,"title":{},"body":{"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["result",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["rimraf",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":560,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":378,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":545,"title":{},"body":{"index.html":{}}}],["search",{"_index":194,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"injectables/TasksService.html":{}}}],["secretorkey",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":546,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["setdescription('tasks",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('tasks",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":547,"title":{},"body":{"index.html":{}}}],["signin",{"_index":12,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcredentials",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":14,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup",{"_index":13,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":27,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"index.html":{}}}],["sponsors",{"_index":578,"title":{},"body":{"index.html":{}}}],["src/.../database.config.ts",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.ts",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../find",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../password.ts",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task",{"_index":529,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.repository.ts",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../v1.app.ts",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../v1.swagger.ts",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/core/validations/email.ts",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/validations/password.ts",{"_index":472,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/auth/auth.controller.ts",{"_index":6,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/app/v1/auth/auth.controller.ts:19",{"_index":30,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/v1/auth/auth.controller.ts:25",{"_index":20,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/v1/auth/auth.module.ts",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/app/v1/auth/auth.service.ts",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/v1/auth/auth.service.ts:14",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:32",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:54",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/decorators/get",{"_index":475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/auth/dto/auth",{"_index":62,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/app/v1/auth/interfaces/jwt",{"_index":213,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.guard.ts",{"_index":207,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.strategy.ts",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.strategy.ts:15",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/v1/auth/jwt.strategy.ts:27",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/v1/tasks/dto/create",{"_index":165,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/dto/get",{"_index":191,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/dto/update",{"_index":373,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/enums/task",{"_index":531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/v1/tasks/task.entity.ts",{"_index":238,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.entity.ts:14",{"_index":243,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:17",{"_index":245,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:20",{"_index":241,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:23",{"_index":244,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:26",{"_index":249,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.repository.ts",{"_index":256,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.repository.ts:11",{"_index":261,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/app/v1/tasks/task.repository.ts:31",{"_index":263,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/app/v1/tasks/task.subscriber.ts",{"_index":275,"title":{},"body":{"classes/TaskSubscriber.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.subscriber.ts:11",{"_index":285,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["src/app/v1/tasks/task.subscriber.ts:15",{"_index":282,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["src/app/v1/tasks/tasks.controller.ts",{"_index":290,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:31",{"_index":307,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:36",{"_index":304,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:45",{"_index":298,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:54",{"_index":311,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:63",{"_index":301,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.module.ts",{"_index":342,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/app/v1/tasks/tasks.service.ts",{"_index":348,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/app/v1/tasks/tasks.service.ts:14",{"_index":350,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:20",{"_index":354,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:41",{"_index":353,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:52",{"_index":351,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:59",{"_index":355,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:73",{"_index":352,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/users/dto/create",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/app/v1/users/dto/find",{"_index":181,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/users/user.entity.ts",{"_index":377,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/app/v1/users/user.entity.ts:15",{"_index":380,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:18",{"_index":379,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:21",{"_index":386,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:24",{"_index":381,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:27",{"_index":382,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:30",{"_index":385,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.repository.ts",{"_index":393,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/users/user.repository.ts:12",{"_index":398,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/user.repository.ts:39",{"_index":400,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/user.repository.ts:47",{"_index":402,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/users.module.ts",{"_index":427,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/app/v1/users/users.service.ts",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/app/v1/users/users.service.ts:16",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/users/users.service.ts:20",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/users/users.service.ts:9",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/v1.app.ts",{"_index":481,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/v1.module.ts",{"_index":442,"title":{},"body":{"modules/V1Module.html":{}}}],["src/app/v1/v1.module.ts:41",{"_index":446,"title":{},"body":{"modules/V1Module.html":{}}}],["src/app/v1/v1.swagger.ts",{"_index":483,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/database.config.ts",{"_index":486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":451,"title":{},"body":{"modules/V1Module.html":{}}}],["src/main.ts",{"_index":490,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":561,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":564,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":566,"title":{},"body":{"index.html":{}}}],["started",{"_index":539,"title":{"index.html":{}},"body":{}}],["starter",{"_index":554,"title":{},"body":{"index.html":{}}}],["statements",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":195,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status.dto",{"_index":322,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["status.dto.ts",{"_index":374,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":376,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.enum",{"_index":204,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status.enum.ts",{"_index":530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":588,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":67,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["subscriber.{js,ts",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers_entries",{"_index":489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":579,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":599,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["swaggermodule.createdocument(app",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api/v1",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":237,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.description",{"_index":270,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.dto",{"_index":267,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":166,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:5",{"_index":170,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:8",{"_index":169,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":265,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.repository",{"_index":345,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":272,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.title",{"_index":269,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":271,"title":{},"body":{"classes/TaskRepository.html":{},"classes/User.html":{}}}],["taskrepository",{"_index":255,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":192,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":346,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":319,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/task.entity",{"_index":389,"title":{},"body":{"classes/User.html":{}}}],["tasks/tasks.module",{"_index":454,"title":{},"body":{"modules/V1Module.html":{}}}],["taskscontroller",{"_index":289,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":339,"title":{"modules/TasksModule.html":{}},"body":{"modules/TasksModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":318,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":198,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.open",{"_index":288,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["tasksubscriber",{"_index":274,"title":{"classes/TaskSubscriber.html":{}},"body":{"classes/TaskSubscriber.html":{},"coverage.html":{}}}],["test",{"_index":569,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":572,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":571,"title":{},"body":{"index.html":{}}}],["tests",{"_index":568,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":577,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createaccesstoken(payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone",{"_index":273,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["this.gettaskbyid(id",{"_index":365,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hashpassword(password",{"_index":414,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtsertive.sign(payload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.taskrepository.createquerybuilder",{"_index":359,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.createtaskbyuser(createtaskdto",{"_index":364,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete(id",{"_index":370,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findonebyidanduser(id",{"_index":363,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.merge(task",{"_index":366,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.save(task",{"_index":368,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasks(gettasksfilterdto",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userrepository.createuser(createuserdto",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.finduserbyemail(finduserbyemaildto",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbyemail",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyemail",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["throw",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":168,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{}}}],["touch",{"_index":589,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":384,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":415,"title":{},"body":{"classes/UserRepository.html":{}}}],["twitter",{"_index":595,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":252,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":343,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":347,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":430,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":461,"title":{},"body":{"modules/V1Module.html":{}}}],["typescript",{"_index":553,"title":{},"body":{"index.html":{}}}],["ui",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":247,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["unique",{"_index":387,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":391,"title":{},"body":{"classes/User.html":{}}}],["unique_constraint_error_code",{"_index":408,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":567,"title":{},"body":{"index.html":{}}}],["updated",{"_index":367,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskstatus",{"_index":295,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":308,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatusdto",{"_index":309,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["usefactory",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["useguards",{"_index":317,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(jwtauthguard",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes",{"_index":34,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["user",{"_index":149,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/FindUserByEmailDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":327,"title":{},"body":{"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:24",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.entity",{"_index":405,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.repository",{"_index":428,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.salt",{"_index":412,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":416,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":254,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":411,"title":{},"body":{"classes/UserRepository.html":{}}}],["username",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["userrepository",{"_index":392,"title":{"classes/UserRepository.html":{}},"body":{"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.service",{"_index":429,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/user.entity",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["users/users.module",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["users/users.service",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userservice",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":100,"title":{"modules/UsersModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":131,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["v1module",{"_index":439,"title":{"modules/V1Module.html":{}},"body":{"modules/V1Module.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":35,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":80,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["value",{"_index":533,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":606,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":284,"title":{},"body":{"classes/TaskSubscriber.html":{},"modules/V1Module.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":562,"title":{},"body":{"index.html":{}}}],["weak",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":593,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":582,"title":{},"body":{"index.html":{}}}],["z",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":184,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]+)?$/i",{"_index":188,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["z]+\\.([a",{"_index":187,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UsePipes,\n  ValidationPipe\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { JwtResponse } from './interfaces/jwt-response.interface';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('signup')\n  @UsePipes(ValidationPipe)\n  async signUp(@Body() createUserDto: CreateUserDto): Promise {\n    return this.authService.signUp(createUserDto);\n  }\n\n  @Post('signin')\n  @UsePipes(ValidationPipe)\n  async signIn(@Body() authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signIn(authCredentialsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/auth/dto/auth-credentials.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Matches(PASSWORD_VALIDATION_REGEX, {message: PASSWORD_VALIDATION_MESSAGE})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/auth/dto/auth-credentials.dto.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches\n} from 'class-validator';\nimport {\n  EMAIL_VALIDATION_REGEX,\n  EMAIL_VALIDATION_MESSAGE\n} from '../../../core/validations/email'\nimport {\n  PASSWORD_VALIDATION_REGEX,\n  PASSWORD_VALIDATION_MESSAGE\n} from '../../../core/validations/password'\n\nexport class AuthCredentialsDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(\n    PASSWORD_VALIDATION_REGEX,\n    { message: PASSWORD_VALIDATION_MESSAGE }\n  )\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport {\n  ConfigService,\n  ConfigModule\n} from '@nestjs/config';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => (\n        configService.get('jwt')\n      ),\n      inject: [ConfigService],\n      imports: [ConfigModule]\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createAccessToken\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtSertive: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtSertive\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccessToken(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentials: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentials\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport {\n  Injectable,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\nimport { JwtResponse } from './interfaces/jwt-response.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UsersService,\n    private jwtSertive: JwtService\n  ) {\n  }\n\n  async signUp(createUserDto: CreateUserDto): Promise {\n    const user = await this.userService.createUser(createUserDto);\n\n    const payload: JwtPayload = {\n      id: user.id,\n      email: user.email\n    };\n\n    return this.createAccessToken(payload);\n  }\n\n  async signIn(authCredentials: AuthCredentialsDto): Promise {\n    const {\n      email,\n      password\n    } = authCredentials\n\n    const user = await this.userService.findUserByEmail({ email });\n\n    if (!user) throw new UnauthorizedException();\n\n    const isValidPassword = await bcrypt.compare(password, user.password)\n\n    if (!isValidPassword) throw new UnauthorizedException();\n\n    const payload: JwtPayload = {\n      id: user.id,\n      email: user.email\n    };\n\n    return this.createAccessToken(payload);\n  }\n\n  private async createAccessToken(payload: JwtPayload): Promise {\n    const accessToken: string = await this.jwtSertive.sign(payload);\n\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/create-task.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/create-task.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(PASSWORD_VALIDATION_REGEX, {message: PASSWORD_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches\n} from 'class-validator';\nimport {\n  EMAIL_VALIDATION_REGEX,\n  EMAIL_VALIDATION_MESSAGE\n} from '../../../core/validations/email'\nimport {\n  PASSWORD_VALIDATION_REGEX,\n  PASSWORD_VALIDATION_MESSAGE\n} from '../../../core/validations/password'\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(\n    PASSWORD_VALIDATION_REGEX,\n    { message: PASSWORD_VALIDATION_MESSAGE }\n  )\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserByEmailDto.html":{"url":"classes/FindUserByEmailDto.html","title":"class - FindUserByEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserByEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/dto/find-user-by-email.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/find-user-by-email.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  Matches\n} from 'class-validator';\n\nexport const EMAIL_VALIDATION_REGEX = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i\nexport const EMAIL_VALIDATION_MESSAGE = 'invalid email'\n\nexport class FindUserByEmailDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/get-tasks-filter.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/get-tasks-filter.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsEnum,\n  IsNotEmpty\n} from 'class-validator';\nimport { TaskStatus } from '../enums/task-status.enum';\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n\n  @IsOptional()\n  @IsNotEmpty()\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  id: number,\n  email: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtResponse.html":{"url":"interfaces/JwtResponse.html","title":"interface - JwtResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/interfaces/jwt-response.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtResponse {\n  accessToken: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Strategy,\n  ExtractJwt\n} from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport {\n  Injectable\n} from '@nestjs/common';\nimport { User } from '../users/user.entity'\nimport { UsersService } from '../users/users.service'\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private usersService: UsersService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwt').secret\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload\n\n    const user = await this.usersService.findUserByEmail({ email });\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne\n} from 'typeorm';\nimport { User } from '../users/user.entity';\nimport { TaskStatus } from './enums/task-status.enum';\n\n@Entity('tasks')\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  status: TaskStatus;\n\n  @ManyToOne(() => User, user => user.tasks, { eager: false })\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTaskByUser\n                            \n                            \n                                    Async\n                                findOneByIdAndUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTaskByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTaskByUser(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByIdAndUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByIdAndUser(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Repository,\n  EntityRepository\n} from 'typeorm';\nimport { User } from '../users/user.entity';\nimport { Task } from './task.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n  async createTaskByUser(\n    createTaskDto: CreateTaskDto,\n    user: User\n  ): Promise {\n    const {\n      title,\n      description\n    } = createTaskDto;\n\n    const task = new Task();\n\n    task.title = title;\n    task.description = description;\n    task.user = user;\n\n    await task.save();\n\n    return task;\n  }\n\n  async findOneByIdAndUser(\n    id: number,\n    user: User\n  ): Promise {\n    return this.findOne({ id, user })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskSubscriber.html":{"url":"classes/TaskSubscriber.html","title":"class - TaskSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.subscriber.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beforeInsert\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \nbeforeInsert(event: InsertEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.subscriber.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                InsertEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listenTo\n                        \n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.subscriber.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  EntitySubscriberInterface,\n  InsertEvent,\n  EventSubscriber\n} from 'typeorm';\nimport { Task } from './task.entity';\nimport { TaskStatus } from './enums/task-status.enum';\n\n@EventSubscriber()\nexport class TaskSubscriber implements EntitySubscriberInterface {\n  listenTo() {\n    return Task;\n  }\n\n  beforeInsert(event: InsertEvent): void {\n    event.entity.status = TaskStatus.OPEN;\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(getTasksFilterDto: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getTasksFilterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, updateTaskStatusDto: UpdateTaskStatusDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskStatusDto\n                                    \n                                                UpdateTaskStatusDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Patch,\n  Query,\n  UsePipes,\n  ValidationPipe,\n  ParseIntPipe,\n  UseGuards\n} from '@nestjs/common';\nimport { User } from '../users/user.entity';\nimport { Task } from './task.entity';\nimport { TasksService } from './tasks.service';\nimport { JwtAuthGuard } from '../auth/jwt.guard';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { GetUser } from '../auth/decorators/get-user.decorator';\n\n\n@Controller('tasks')\n@UseGuards(JwtAuthGuard)\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Get()\n  @UsePipes(ValidationPipe)\n  getTasks(@Query() getTasksFilterDto: GetTasksFilterDto): Promise {\n    return this.tasksService.getTasks(getTasksFilterDto);\n  }\n\n  @Get(':id')\n  getTaskById(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.getTaskById(id, user);\n  }\n\n  @Post()\n  @UsePipes(ValidationPipe)\n  createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.createTask(createTaskDto, user);\n  }\n\n  @Patch(':id/status')\n  @UsePipes(ValidationPipe)\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateTaskStatusDto: UpdateTaskStatusDto,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, updateTaskStatusDto, user);\n  }\n\n  @Delete(':id')\n  deleteTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.deleteTaskById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './task.repository';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository])\n  ],\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/tasks/tasks.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(getTasksFilterDto: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getTasksFilterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, updateTaskStatusDto: UpdateTaskStatusDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskStatusDto\n                                    \n                                                UpdateTaskStatusDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/user.entity';\nimport { TaskRepository } from './task.repository';\nimport { Task } from './task.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository\n  ) {}\n\n  async getTasks(getTasksFilterDto: GetTasksFilterDto): Promise {\n    const {\n      status,\n      search\n    } = getTasksFilterDto\n\n    const query = this.taskRepository.createQueryBuilder();\n\n    if (status) {\n      query.andWhere('status = :status', { status })\n    }\n\n    if (search) {\n      query.andWhere('(title LIKE :search OR description LIKE :search)', { search: `%${search}%` })\n    }\n\n    const tasks = await query.getMany();\n\n    return tasks;\n  }\n\n  async getTaskById(\n    id: number,\n    user: User\n  ): Promise {\n    const task = await this.taskRepository.findOneByIdAndUser(id, user);\n\n    if (!task) throw new NotFoundException();\n\n    return task;\n  }\n\n  async createTask(\n    createTaskDto: CreateTaskDto,\n    user: User\n  ): Promise {\n    return await this.taskRepository.createTaskByUser(createTaskDto, user);\n  }\n\n  async updateTaskStatus(\n    id: number,\n    updateTaskStatusDto: UpdateTaskStatusDto,\n    user: User\n  ): Promise {\n    const task: Task = await this.getTaskById(id, user);\n\n    this.taskRepository.merge(task, updateTaskStatusDto);\n\n    const updated = await this.taskRepository.save(task);\n\n    return updated;\n  }\n\n  async deleteTaskById(id: number): Promise {\n    const deleted = await this.taskRepository.delete(id)\n\n    if (deleted.affected === 0) throw new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/update-task-status.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/update-task-status.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEnum\n} from 'class-validator';\nimport { TaskStatus } from '../enums/task-status.enum';\n\nexport class UpdateTaskStatusDto {\n  @IsNotEmpty()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Unique,\n  OneToMany\n} from 'typeorm';\nimport { Task } from '../tasks/task.entity';\n\n@Entity('users')\n@Unique(['email'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(() => Task, task => task.user, { eager: true })\n  tasks: Task[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(findUserByEmailDto: FindUserByEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findUserByEmailDto\n                                    \n                                                FindUserByEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport { Repository, EntityRepository } from 'typeorm';\nimport { ConflictException, InternalServerErrorException } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { FindUserByEmailDto } from './dto/find-user-by-email.dto';\n\nexport const UNIQUE_CONSTRAINT_ERROR_CODE = 23505\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const {\n      email,\n      username,\n      password\n    } = createUserDto;\n\n    const user = new User();\n\n    user.username = username;\n    user.email = email;\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save();\n    } catch (error) {\n      if (parseInt(error.code) === UNIQUE_CONSTRAINT_ERROR_CODE) {\n        throw new ConflictException('Email already exists');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n\n    return user;\n  }\n\n  async findUserByEmail(findUserByEmailDto: FindUserByEmailDto): Promise {\n    const { email } = findUserByEmailDto;\n\n    const user = await this.findOne({ email });\n\n    return user;\n  }\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './user.repository';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(findUserByEmailDto: FindUserByEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findUserByEmailDto\n                                    \n                                                FindUserByEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserRepository } from './user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity'\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { FindUserByEmailDto } from './dto/find-user-by-email.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository\n  ) {\n  }\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    return this.userRepository.createUser(createUserDto);\n  }\n\n  async findUserByEmail(findUserByEmailDto: FindUserByEmailDto): Promise {\n    return this.userRepository.findUserByEmail(findUserByEmailDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/V1Module.html":{"url":"modules/V1Module.html","title":"module - V1Module","body":"\n                   \n\n\n\n\n    Modules\n    V1Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_V1Module\n\n\n\ncluster_V1Module_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nV1Module\n\nV1Module\n\nV1Module -->\n\nAuthModule->V1Module\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nV1Module -->\n\nTasksModule->V1Module\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nV1Module -->\n\nUsersModule->V1Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/v1.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/v1.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import * as compression from 'compression';\nimport * as helmet from 'helmet';\nimport {\n  Module,\n  MiddlewareConsumer\n} from '@nestjs/common';\nimport {\n  ConfigModule,\n  ConfigService\n} from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport jwtConfig from 'src/config/jwt.config';\nimport databaseConfig from '../../config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthModule } from './auth/auth.module';\nimport { DefaultAdminModule } from 'nestjs-admin';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        databaseConfig,\n        jwtConfig\n      ]\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => (\n        configService.get('database')\n      ),\n      inject: [ConfigService]\n    }),\n    TasksModule,\n    AuthModule,\n    UsersModule,\n    DefaultAdminModule\n  ],\n})\nexport class V1Module {\n  configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(compression());\n    consumer.apply(helmet());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/core/validations/email.ts\n            \n            variable\n            EMAIL_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/email.ts\n            \n            variable\n            EMAIL_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/password.ts\n            \n            variable\n            PASSWORD_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/password.ts\n            \n            variable\n            PASSWORD_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/v1/auth/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/interfaces/jwt-response.interface.ts\n            \n            interface\n            JwtResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/auth/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.subscriber.ts\n            \n            class\n            TaskSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            class\n            FindUserByEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            variable\n            EMAIL_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            variable\n            EMAIL_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.repository.ts\n            \n            variable\n            UNIQUE_CONSTRAINT_ERROR_CODE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/v1/v1.app.ts\n            \n            variable\n            createApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/v1.swagger.ts\n            \n            variable\n            buildV1Documentation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/v1.swagger.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            ADMIN_USER_ENTITIES_ENTRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            ENTITIES_ENTRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            SUBSCRIBERS_ENTRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            compression : ^1.7.4\n        \n            helmet : ^3.23.3\n        \n            nestjs-admin : ^0.4.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.2.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.25\n        \n            uuid : ^8.2.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/v1/tasks/enums/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        V1Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_V1Module\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nV1Module\n\nV1Module\n\nV1Module -->\n\nUsersModule->V1Module\n\n\n\nV1Module -->\n\nAuthModule->V1Module\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nV1Module -->\n\nTasksModule->V1Module\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ADMIN_USER_ENTITIES_ENTRIES   (src/.../database.config.ts)\n                        \n                        \n                            buildV1Documentation   (src/.../v1.swagger.ts)\n                        \n                        \n                            createApp   (src/.../v1.app.ts)\n                        \n                        \n                            EMAIL_VALIDATION_MESSAGE   (src/.../email.ts)\n                        \n                        \n                            EMAIL_VALIDATION_MESSAGE   (src/.../find-user-by-email.dto.ts)\n                        \n                        \n                            EMAIL_VALIDATION_REGEX   (src/.../email.ts)\n                        \n                        \n                            EMAIL_VALIDATION_REGEX   (src/.../find-user-by-email.dto.ts)\n                        \n                        \n                            ENTITIES_ENTRIES   (src/.../database.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            options   (src/.../v1.swagger.ts)\n                        \n                        \n                            PASSWORD_VALIDATION_MESSAGE   (src/.../password.ts)\n                        \n                        \n                            PASSWORD_VALIDATION_REGEX   (src/.../password.ts)\n                        \n                        \n                            SUBSCRIBERS_ENTRIES   (src/.../database.config.ts)\n                        \n                        \n                            UNIQUE_CONSTRAINT_ERROR_CODE   (src/.../user.repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ADMIN_USER_ENTITIES_ENTRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : path.join(__dirname, '../../node_modules/nestjs-admin/**/*.entity.js')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ENTITIES_ENTRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : path.join(__dirname, '../**/*.entity.{js,ts}')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SUBSCRIBERS_ENTRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : path.join(__dirname, '../**/*.subscriber.{js,ts}')\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/v1.swagger.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            buildV1Documentation\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (app: INestApplication): void => {\n  const document = SwaggerModule.createDocument(app, options);\n\n  SwaggerModule.setup('api/v1', app, document)\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new DocumentBuilder()\n  .setTitle('Tasks Management API')\n  .setDescription('Tasks Management API description')\n  .setVersion('1.0')\n  .addBearerAuth()\n  .build()\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/v1.app.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            createApp\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : async (server: Express): Promise => {\n  const appFactory = new NestFactoryStatic();\n  const app = await appFactory\n    .create(\n      V1Module,\n      new ExpressAdapter(server)\n    );\n\n  app.setGlobalPrefix('api/v1');\n\n  buildV1Documentation(app);\n\n  return app.init();\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/core/validations/email.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invalid email'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/users/dto/find-user-by-email.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invalid email'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/auth/decorators/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((_, ctx: ExecutionContext): User => {\n  const req = ctx.switchToHttp().getRequest();\n\n  return req.user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/core/validations/password.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password too weak'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/users/user.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNIQUE_CONSTRAINT_ERROR_CODE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 23505\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
