var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AuthController.html",[0,1.846,1,2.053]],["body/controllers/AuthController.html",[0,1.709,1,2.651,2,1.55,3,0.284,4,0.246,5,0.246,6,2.461,7,2.461,8,2.948,9,0.324,10,1.657,11,2.677,12,3.433,13,3.433,14,2.948,15,3.237,16,1.524,17,0.032,18,2.948,19,0.844,20,2.948,21,1.657,22,1.657,23,0.57,24,1.657,25,1.657,26,2.249,27,2.461,28,2.677,29,2.948,30,2.948,31,0.668,32,2.461,33,2.461,34,2.461,35,2.461,36,0.852,37,2.49,38,2.461,39,2.461,40,1.9,41,2.461,42,2.461,43,1.709,44,2.14,45,2.461,46,2.948,47,0.284,48,0.065,49,2.461,50,2.948,51,3.433,52,2.948,53,1.524,54,2.948,55,2.948,56,2.948,57,2.948,58,0.015,59,0.02,60,0.015]],["title/classes/AuthCredentialsDto.html",[15,1.846,48,0.07]],["body/classes/AuthCredentialsDto.html",[3,0.318,4,0.275,5,0.275,9,0.362,15,2.575,16,1.646,17,0.032,19,0.912,23,0.616,31,0.622,47,0.318,48,0.098,58,0.016,59,0.022,60,0.016,61,1.036,62,4.193,63,2.754,64,1.646,65,2.024,66,2.64,67,1.688,68,2.395,69,3.901,70,2.912,71,3.299,72,3.299,73,3.299,74,3.299,75,2.64,76,3.646,77,2.754,78,2.754,79,3.646,80,1.581,81,2.575,82,2.754,83,2.864,84,2.864,85,2.754,86,2.754,87,2.754]],["title/modules/AuthModule.html",[88,1.283,89,1.846]],["body/modules/AuthModule.html",[1,3.019,2,2.13,3,0.278,4,0.241,5,0.241,17,0.032,31,0.72,36,0.835,37,2.916,38,2.41,47,0.278,48,0.064,58,0.014,59,0.02,60,0.014,88,1.887,89,3.471,90,1.384,91,1.384,92,1.673,93,1.673,94,1.384,95,2.715,96,1.673,97,2.41,98,2.41,99,2.41,100,2.916,101,3.215,102,2.349,103,1.673,104,1.673,105,2.887,106,3.019,107,2.887,108,1.861,109,2.887,110,2.095,111,3.687,112,3.91,113,1.861,114,2.41,115,2.887,116,2.887,117,2.887,118,2.887,119,2.095,120,2.887,121,2.41,122,2.887,123,2.41]],["title/injectables/AuthService.html",[37,1.674,124,1.086]],["body/injectables/AuthService.html",[3,0.204,4,0.177,5,0.177,9,0.233,10,1.302,11,2.618,12,2.699,13,2.699,15,2.54,17,0.032,19,0.899,21,1.765,22,1.765,23,0.607,24,1.765,25,1.578,26,2.182,27,2.699,28,2.261,31,0.66,36,0.613,37,1.699,39,1.77,40,1.367,41,1.77,42,1.77,43,1.229,44,2.347,45,1.77,47,0.204,48,0.047,53,1.452,58,0.01,59,0.016,60,0.01,65,1.765,66,1.115,67,0.666,110,1.539,124,1.103,125,1.115,126,1.77,127,2.735,128,3.233,129,2.084,130,2.121,131,2.101,132,3.918,133,4.382,134,2.121,135,3.233,136,3.233,137,2.882,138,2.121,139,3.271,140,3.233,141,2.121,142,3.233,143,2.121,144,2.347,145,3.918,146,1.77,147,1.77,148,2.478,149,1.133,150,2.54,151,2.121,152,1.55,153,3.233,154,2.699,155,3.233,156,2.121,157,2.347,158,1.874,159,3.233,160,2.121,161,1.77,162,2.699,163,2.121]],["title/classes/CreateTaskDto.html",[48,0.07,164,1.674]],["body/classes/CreateTaskDto.html",[3,0.374,4,0.324,5,0.324,9,0.427,16,1.832,17,0.031,19,1.015,23,0.685,31,0.481,47,0.374,48,0.109,58,0.019,59,0.024,60,0.019,61,1.22,64,1.832,67,1.798,75,3.108,80,1.862,164,2.599,165,4.541,166,3.243,167,3.153,168,3.949,169,3.886,170,3.886]],["title/classes/CreateUserDto.html",[28,1.527,48,0.07]],["body/classes/CreateUserDto.html",[3,0.298,4,0.258,5,0.258,9,0.339,16,1.799,17,0.032,19,0.997,23,0.673,28,2.037,31,0.602,47,0.298,48,0.094,58,0.015,59,0.021,60,0.015,61,0.971,64,1.574,65,1.957,66,2.553,67,1.78,68,2.243,69,3.797,70,2.815,75,2.749,76,3.797,77,2.58,78,2.58,79,3.526,80,1.481,81,2.463,82,2.58,83,2.739,84,3.131,85,2.58,86,2.58,87,3.548,171,4.366,172,2.58,173,3.526,174,3.091,175,3.091,176,3.091,177,3.091,178,3.091,179,3.091]],["title/classes/FindUserByEmailDto.html",[48,0.07,180,1.846]],["body/classes/FindUserByEmailDto.html",[3,0.348,4,0.302,5,0.302,9,0.397,16,1.339,17,0.031,19,0.742,23,0.501,31,0.448,47,0.506,48,0.104,58,0.018,59,0.023,60,0.018,61,1.135,64,1.749,65,2.245,67,1.483,68,2.624,69,3.427,70,3.047,75,2.481,76,3.427,79,3.427,80,1.733,81,2.736,148,2.263,149,1.365,180,2.736,181,3.427,182,2.624,183,3.615,184,3.941,185,3.018,186,3.018,187,3.018,188,3.018,189,3.018]],["title/classes/GetTasksFilterDto.html",[48,0.07,190,1.846]],["body/classes/GetTasksFilterDto.html",[3,0.353,4,0.306,5,0.306,9,0.402,16,1.764,17,0.031,19,0.977,23,0.66,31,0.59,47,0.353,48,0.105,58,0.018,59,0.024,60,0.018,61,1.15,64,1.764,67,1.495,75,2.503,80,1.756,190,2.76,191,4.416,192,3.066,193,3.058,194,4.416,195,3.41,196,3.663,197,3.663,198,3.066,199,3.663,200,3.663,201,5.29,202,3.058,203,2.361,204,2.361,205,3.058]],["title/injectables/JwtAuthGuard.html",[124,1.086,206,2.053]],["body/injectables/JwtAuthGuard.html",[3,0.426,4,0.369,5,0.369,17,0.031,31,0.664,36,1.279,47,0.426,48,0.097,58,0.022,59,0.026,60,0.022,108,2.851,124,1.828,125,2.325,206,3.455,207,3.692,208,4.423,209,2.325,210,4.423]],["title/interfaces/JwtPayload.html",[137,1.846,211,1.846]],["body/interfaces/JwtPayload.html",[3,0.405,4,0.35,5,0.35,9,0.461,17,0.03,23,0.72,47,0.405,58,0.021,59,0.026,60,0.021,64,1.924,65,2.372,67,1.77,137,3.01,152,2.823,211,2.434,212,3.049,213,3.049,214,3.506,215,2.702]],["title/interfaces/JwtResponse.html",[43,1.846,211,1.846]],["body/interfaces/JwtResponse.html",[3,0.424,4,0.367,5,0.367,9,0.483,17,0.03,23,0.61,43,3.097,47,0.424,58,0.022,59,0.026,60,0.022,64,1.979,67,1.807,162,4.995,211,2.551,212,3.194,213,3.194,216,3.673]],["title/injectables/JwtStrategy.html",[101,1.846,124,1.086]],["body/injectables/JwtStrategy.html",[3,0.273,4,0.237,5,0.237,9,0.312,10,1.613,11,2.224,17,0.032,19,0.822,21,1.613,22,1.613,23,0.555,24,1.613,25,1.143,26,1.757,31,0.702,36,0.82,44,2.06,47,0.273,48,0.062,53,1.051,58,0.014,59,0.02,60,0.014,65,1.613,101,2.321,108,1.829,111,4.004,113,1.829,119,2.06,124,1.366,125,1.491,127,2.321,129,2.581,131,2.717,137,2.922,139,3.342,146,2.368,147,2.368,148,1.919,149,1.342,150,1.645,209,1.491,217,2.368,218,4.004,219,2.837,220,2.837,221,4.004,222,2.837,223,2.837,224,2.837,225,2.368,226,2.837,227,1.645,228,2.837,229,2.837,230,2.837,231,2.837,232,2.837,233,2.368,234,2.837,235,2.837,236,2.837]],["title/classes/Task.html",[48,0.07,237,1.283]],["body/classes/Task.html",[3,0.285,4,0.247,5,0.247,9,0.325,16,2,17,0.032,19,1.108,23,0.748,31,0.588,47,0.285,48,0.065,58,0.015,59,0.02,60,0.015,61,0.929,64,1.528,67,1.612,149,1.692,152,2.275,167,2.751,168,3.445,195,3.059,198,2.751,203,1.907,204,1.907,209,2.167,215,1.976,227,1.715,233,3.442,237,1.661,238,2.47,239,3.962,240,4.788,241,2.959,242,3.962,243,2.959,244,2.959,245,2.959,246,2.959,247,2.47,248,3.442,249,2.959,250,2.47,251,4.123,252,1.555,253,2.959,254,2.959]],["title/classes/TaskRepository.html",[48,0.07,255,1.846]],["body/classes/TaskRepository.html",[3,0.267,4,0.231,5,0.231,9,0.304,10,1.586,11,2.624,17,0.032,19,0.808,21,1.586,22,1.586,23,0.546,24,1.586,25,1.586,26,2.189,31,0.618,47,0.267,48,0.061,53,1.459,58,0.014,59,0.019,60,0.014,61,0.87,148,1.887,149,1.793,150,1.606,152,2.195,158,1.606,164,2.96,167,2.283,168,2.858,209,2.07,215,2.195,227,1.606,237,2.009,252,1.457,255,2.283,256,2.313,257,3.325,258,4.58,259,4.58,260,2.771,261,2.771,262,2.771,263,2.771,264,2.313,265,1.786,266,1.606,267,2.012,268,2.771,269,2.771,270,2.771,271,2.313,272,2.771,273,2.313]],["title/classes/TaskSubscriber.html",[48,0.07,274,2.312]],["body/classes/TaskSubscriber.html",[3,0.337,4,0.291,5,0.291,9,0.384,10,1.859,17,0.032,19,0.947,21,1.407,22,1.407,23,0.484,24,1.407,25,1.859,31,0.64,47,0.337,48,0.077,53,1.294,58,0.017,59,0.023,60,0.017,61,1.097,198,2.025,203,2.252,204,2.252,237,1.859,252,1.836,265,2.252,274,3.351,275,2.916,276,4.616,277,5.169,278,4.616,279,5.499,280,4.616,281,5.499,282,3.494,283,3.494,284,4.616,285,3.494,286,4.616,287,3.494,288,3.494]],["title/controllers/TasksController.html",[0,1.846,289,2.053]],["body/controllers/TasksController.html",[0,1.118,2,1.014,3,0.186,4,0.161,5,0.161,7,1.61,9,0.212,10,1.211,16,1.674,17,0.032,19,0.927,21,1.82,22,1.82,23,0.626,24,1.82,25,1.82,26,2.382,31,0.658,32,2.508,33,3.082,34,1.61,35,1.61,36,0.558,47,0.186,48,0.042,49,1.61,51,3.082,53,1.674,58,0.01,59,0.015,60,0.01,149,1.764,152,2.294,164,2.515,190,2.774,192,1.742,206,1.243,215,2.545,227,1.118,237,1.211,265,1.243,266,1.118,267,1.4,289,1.937,290,1.61,291,3.082,292,2.508,293,3.082,294,2.508,295,3.082,296,1.61,297,1.929,298,1.929,299,1.61,300,3.005,301,1.929,302,1.61,303,3.005,304,1.929,305,1.61,306,1.929,307,1.929,308,1.61,309,2.996,310,1.929,311,1.929,312,1.929,313,1.929,314,1.929,315,1.61,316,4.168,317,1.929,318,1.94,319,1.61,320,1.929,321,1.61,322,1.61,323,1.61,324,1.61,325,3.026,326,1.929,327,1.929,328,1.929,329,1.929,330,1.929,331,1.929,332,3.005,333,1.929,334,1.929,335,1.929,336,1.929,337,1.929,338,1.929]],["title/modules/TasksModule.html",[88,1.283,339,1.846]],["body/modules/TasksModule.html",[2,2.447,3,0.341,4,0.295,5,0.295,17,0.032,31,0.711,36,1.023,47,0.341,48,0.078,58,0.017,59,0.023,60,0.017,88,2.095,90,1.696,91,1.696,92,2.051,93,2.051,94,1.696,95,3.015,96,2.051,102,2.698,103,2.051,104,2.051,106,2.281,255,2.051,289,3.353,318,3.098,319,2.953,339,3.417,340,2.953,341,2.953,342,3.538,343,2.568,344,1.86,345,2.953,346,3.538,347,3.538]],["title/injectables/TasksService.html",[124,1.086,318,1.674]],["body/injectables/TasksService.html",[3,0.168,4,0.146,5,0.146,9,0.192,10,1.119,11,2.732,17,0.032,19,0.941,21,1.848,22,1.848,23,0.636,24,1.848,25,1.735,26,2.314,31,0.619,36,0.505,47,0.168,48,0.038,53,1.462,58,0.009,59,0.014,60,0.009,124,0.948,125,0.918,127,1.012,129,1.791,148,2.306,149,1.738,150,2.659,152,2.064,157,2.017,158,1.611,164,2.411,167,1.012,190,2.659,192,2.006,194,3.829,195,2.543,215,2.466,227,1.012,237,1.938,255,2.659,265,1.126,266,1.012,267,1.268,291,2.889,292,2.32,293,2.889,294,2.32,295,2.889,296,1.458,299,2.32,302,1.458,305,2.32,308,1.458,309,2.895,315,1.458,318,1.461,321,1.458,322,1.458,323,1.458,324,1.458,344,0.918,345,1.458,348,1.458,349,1.746,350,1.746,351,1.746,352,1.746,353,1.746,354,1.746,355,1.746,356,3.461,357,1.458,358,1.746,359,1.746,360,1.746,361,1.746,362,1.746,363,1.746,364,1.746,365,1.746,366,1.746,367,2.779,368,1.746,369,1.746,370,1.746,371,1.746,372,1.458]],["title/classes/UpdateTaskStatusDto.html",[48,0.07,309,1.846]],["body/classes/UpdateTaskStatusDto.html",[3,0.382,4,0.33,5,0.33,9,0.435,16,1.467,17,0.031,19,0.813,23,0.549,31,0.62,47,0.382,48,0.11,58,0.02,59,0.025,60,0.02,61,1.244,64,1.854,75,2.631,80,1.898,195,3.537,198,3.181,202,3.305,203,2.552,204,2.552,205,3.305,237,2.016,309,2.901,373,4.178,374,3.305,375,3.96,376,3.96]],["title/classes/User.html",[48,0.07,149,0.921]],["body/classes/User.html",[3,0.276,4,0.239,5,0.239,9,0.315,16,2.05,17,0.032,19,1.136,23,0.767,31,0.5,47,0.276,48,0.063,58,0.014,59,0.02,60,0.014,61,0.9,64,1.494,65,1.88,66,2.453,67,1.823,149,1.166,152,2.237,173,3.387,192,2.705,209,2.12,215,1.933,237,2.15,239,3.895,240,4.926,242,3.895,247,2.393,248,3.367,250,2.393,252,1.507,271,2.393,377,2.393,378,3.895,379,2.867,380,2.867,381,2.867,382,2.867,383,2.867,384,4.033,385,2.867,386,2.867,387,2.867,388,4.033,389,2.867,390,2.867,391,2.867]],["title/classes/UserRepository.html",[48,0.07,392,1.846]],["body/classes/UserRepository.html",[3,0.213,4,0.184,5,0.184,9,0.243,10,1.344,11,2.649,17,0.032,19,0.825,21,1.619,22,1.619,23,0.557,24,1.619,25,1.619,26,2.217,28,2.422,31,0.626,36,0.639,40,1.425,47,0.322,48,0.049,53,1.489,58,0.011,59,0.016,60,0.011,61,0.694,65,1.803,66,1.754,67,1.587,127,2.33,144,2.422,148,2.303,149,1.517,150,2.595,154,1.845,157,2.422,158,2.33,161,1.845,173,2.422,180,2.929,209,1.754,252,1.162,257,2.917,264,1.845,266,1.282,273,1.845,378,3.737,392,1.934,393,1.605,394,2.785,395,2.785,396,3.337,397,2.785,398,2.211,399,2.785,400,2.211,401,3.337,402,2.211,403,2.211,404,3.337,405,1.845,406,1.845,407,1.845,408,2.422,409,1.845,410,2.211,411,2.211,412,3.337,413,2.211,414,2.211,415,2.211,416,2.211,417,2.211,418,2.211,419,2.211,420,2.211,421,2.211,422,2.211,423,2.211]],["title/modules/UsersModule.html",[88,1.283,100,1.674]],["body/modules/UsersModule.html",[2,1.829,3,0.335,4,0.29,5,0.29,17,0.032,31,0.68,36,1.006,47,0.335,48,0.077,58,0.017,59,0.023,60,0.017,88,2.078,90,1.668,91,1.668,92,2.017,93,2.017,94,1.668,95,2.99,96,2.99,100,3.145,102,2.668,103,2.017,104,2.017,106,2.242,131,3.019,343,2.525,344,1.829,392,2.017,424,2.904,425,2.904,426,2.904,427,3.479,428,2.904,429,3.479,430,3.479]],["title/injectables/UsersService.html",[124,1.086,131,1.527]],["body/injectables/UsersService.html",[3,0.281,4,0.243,5,0.243,9,0.32,10,1.645,11,2.668,17,0.032,19,0.967,21,1.897,22,1.897,23,0.653,24,1.897,25,1.645,26,2.239,28,2.574,31,0.69,36,0.844,40,1.88,47,0.281,48,0.064,53,1.513,58,0.014,59,0.02,60,0.014,124,1.392,125,1.533,127,1.691,129,2.632,131,1.957,149,1.181,180,3.113,266,1.691,344,1.533,357,2.435,392,3.226,394,3.408,395,3.408,397,3.408,399,3.408,405,2.435,406,2.435,407,2.435,428,2.435,431,2.435,432,2.917,433,2.917,434,2.917,435,2.917,436,2.917,437,2.917,438,2.917]],["title/modules/V1Module.html",[88,1.283,439,2.053]],["body/modules/V1Module.html",[3,0.289,4,0.25,5,0.25,17,0.032,31,0.727,36,0.868,47,0.289,48,0.066,58,0.015,59,0.021,60,0.015,88,1.927,89,3.255,90,1.439,91,1.439,92,1.74,93,1.74,94,1.439,95,1.74,96,1.74,100,2.952,102,2.414,103,1.74,104,1.74,106,3.083,111,3.75,112,3.476,113,1.935,114,2.505,121,2.505,123,2.505,339,3.255,343,2.179,344,1.578,439,3.891,440,2.505,441,3.001,442,3.001,443,4.165,444,3.001,445,4.165,446,3.001,447,3.001,448,3.001,449,3.001,450,3.001,451,3.001,452,3.001]],["title/coverage.html",[453,3.149]],["body/coverage.html",[0,1.934,1,1.425,5,0.184,6,1.845,15,1.282,17,0.032,23,0.306,28,1.06,37,1.162,43,1.282,48,0.126,58,0.011,59,0.016,60,0.011,62,1.845,63,1.845,70,1.934,81,1.934,83,1.425,84,1.425,94,1.06,101,1.282,124,1.639,126,1.845,131,1.06,137,1.282,149,1.295,158,1.282,164,1.162,165,1.845,166,1.845,171,1.845,172,1.845,180,1.282,181,2.917,182,2.917,190,1.282,191,1.845,192,1.282,193,1.845,206,1.425,207,1.845,211,1.934,213,2.422,214,1.845,216,1.845,217,1.845,237,1.344,238,1.845,255,1.282,256,1.845,274,1.605,275,1.845,289,1.425,290,1.845,309,1.282,318,1.162,325,1.605,348,1.845,372,5.32,373,1.845,374,1.845,377,1.845,392,1.282,393,2.422,408,1.605,431,1.845,453,1.605,454,2.211,455,2.211,456,2.211,457,2.785,458,5.631,459,5.797,460,2.785,461,5.399,462,2.211,463,1.845,464,1.845,465,4.019,466,3.337,467,3.337,468,4.019,469,2.785,470,1.845,471,1.845,472,1.845,473,2.211,474,2.211,475,2.211]],["title/dependencies.html",[91,1.835,476,2.665]],["body/dependencies.html",[17,0.032,36,1.083,48,0.106,58,0.018,59,0.024,60,0.018,80,1.795,91,1.795,108,2.414,110,2.719,113,2.414,119,2.719,144,2.719,225,4.032,252,1.969,344,1.969,477,5.347,478,3.745,479,3.745,480,5.347,481,3.745,482,3.745,483,3.745,484,3.745,485,3.745,486,3.745,487,3.745,488,3.745,489,3.745,490,3.745,491,3.745,492,3.745,493,3.745,494,3.745,495,3.745,496,3.745,497,3.745,498,3.745]],["title/miscellaneous/enumerations.html",[499,1.401,500,3.196]],["body/miscellaneous/enumerations.html",[9,0.491,17,0.03,58,0.022,59,0.027,60,0.022,198,3.127,499,2.35,500,3.732,501,4.471,502,5.395,503,4.471,504,4.503,505,4.837,506,5.395,507,5.395]],["title/miscellaneous/functions.html",[499,1.401,508,3.196]],["body/miscellaneous/functions.html",[9,0.528,17,0.028,58,0.024,59,0.028,60,0.024,94,2.864,472,4.013,499,2.527,508,4.013,509,4.807]],["title/index.html",[9,0.293,510,2.665,511,2.665]],["body/index.html",[4,0.267,17,0.031,58,0.016,59,0.021,60,0.016,167,1.854,257,2.321,453,2.321,504,2.669,512,3.198,513,3.198,514,4.35,515,3.198,516,3.198,517,3.198,518,3.198,519,3.198,520,3.198,521,3.198,522,3.198,523,3.198,524,4.944,525,3.198,526,3.198,527,3.198,528,5.858,529,3.198,530,3.198,531,3.198,532,5.725,533,3.198,534,3.198,535,4.35,536,3.198,537,3.198,538,3.198,539,3.198,540,4.35,541,4.35,542,3.198,543,3.198,544,3.198,545,4.35,546,4.35,547,3.198,548,3.198,549,3.198,550,3.198,551,2.669,552,3.198,553,3.198,554,3.198,555,3.198,556,3.198,557,3.198,558,3.198,559,3.198,560,3.198,561,3.198,562,3.198,563,3.198,564,3.198,565,3.198,566,3.198,567,3.198,568,3.198,569,3.198]],["title/modules.html",[90,2.08]],["body/modules.html",[17,0.027,58,0.022,59,0.027,60,0.022,89,2.592,90,2.143,100,2.35,339,2.592,439,2.882,551,5.022,570,6.017,571,6.017,572,6.017]],["title/overview.html",[573,3.622]],["body/overview.html",[2,1.748,17,0.031,37,2.651,58,0.016,59,0.022,60,0.016,61,1.044,88,1.34,89,3.532,90,1.594,91,1.594,92,1.928,93,1.928,94,1.594,95,1.928,96,1.928,97,2.776,98,2.776,99,2.776,100,3.11,101,2.924,102,2.589,103,1.928,104,1.928,125,1.748,131,2.836,212,2.414,318,2.651,339,3.261,340,2.776,341,2.776,424,2.776,425,2.776,426,2.776,439,3.877,440,2.776,573,2.776,574,3.326,575,4.467,576,3.326,577,3.326]],["title/miscellaneous/variables.html",[499,1.401,578,3.196]],["body/miscellaneous/variables.html",[9,0.311,17,0.032,23,0.764,53,1.048,58,0.014,59,0.02,60,0.014,65,1.609,66,1.486,67,1.667,70,2.917,81,2.917,83,2.575,84,2.575,148,1.355,149,1.455,181,2.053,182,3.362,184,3.334,185,2.36,186,2.36,187,2.36,188,2.36,189,3.334,215,1.355,325,2.9,393,2.053,408,2.9,409,2.36,457,2.36,460,2.36,463,2.36,464,3.334,469,2.36,470,3.334,471,3.334,499,1.486,505,4.977,578,2.36,579,3.994,580,3.994,581,3.994,582,2.828,583,3.994,584,2.828,585,5.963,586,2.828,587,3.994,588,2.828,589,2.828,590,2.828,591,2.828,592,2.828,593,2.828,594,2.828,595,2.828,596,2.828,597,2.828,598,2.828,599,2.828]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":372,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":577,"title":{},"body":{"overview.html":{}}}],["2",{"_index":575,"title":{},"body":{"overview.html":{}}}],["23505",{"_index":409,"title":{},"body":{"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":574,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":576,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["9.]+@[a",{"_index":185,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["9]+\\.[a",{"_index":186,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtResponse.html":{}}}],["already",{"_index":421,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":552,"title":{},"body":{"index.html":{}}}],["angular",{"_index":523,"title":{},"body":{"index.html":{}}}],["app",{"_index":530,"title":{},"body":{"index.html":{}}}],["applications",{"_index":520,"title":{},"body":{"index.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":8,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":38,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":448,"title":{},"body":{"modules/V1Module.html":{}}}],["auth/decorators/get",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{}}}],["auth/jwt.guard",{"_index":320,"title":{},"body":{"controllers/TasksController.html":{}}}],["authcontroller",{"_index":1,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentials",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcredentialsdto",{"_index":15,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":208,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":210,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":89,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":562,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":37,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":553,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":239,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":413,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":423,"title":{},"body":{"classes/UserRepository.html":{}}}],["beforeinsert",{"_index":278,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["beforeinsert(event",{"_index":280,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["body",{"_index":33,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["bootstrap",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":572,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":570,"title":{},"body":{"modules.html":{}}}],["building",{"_index":515,"title":{},"body":{"index.html":{}}}],["catch",{"_index":417,"title":{},"body":{"classes/UserRepository.html":{}}}],["class",{"_index":48,"title":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":61,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":340,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":341,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":424,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":425,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":426,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_v1module",{"_index":440,"title":{},"body":{"modules/V1Module.html":{},"overview.html":{}}}],["cluster_v1module_imports",{"_index":441,"title":{},"body":{"modules/V1Module.html":{}}}],["column",{"_index":240,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["config/database.config",{"_index":446,"title":{},"body":{"modules/V1Module.html":{}}}],["configmodule",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["configmodule.forroot",{"_index":449,"title":{},"body":{"modules/V1Module.html":{}}}],["configservice",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/V1Module.html":{}}}],["configservice.get('database",{"_index":452,"title":{},"body":{"modules/V1Module.html":{}}}],["configservice.get('jwt",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt').secret",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["conflictexception",{"_index":403,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('email",{"_index":420,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindUserByEmailDto.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":349,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core/validations/email",{"_index":82,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["core/validations/password",{"_index":85,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["coverage",{"_index":453,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createaccesstoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["createaccesstoken(payload",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["createparamdecorator((_",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":291,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(createtaskdto",{"_index":296,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskbyuser",{"_index":258,"title":{},"body":{"classes/TaskRepository.html":{}}}],["createtaskbyuser(createtaskdto",{"_index":260,"title":{},"body":{"classes/TaskRepository.html":{}}}],["createtaskdto",{"_index":164,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["createuser",{"_index":394,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":397,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":28,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials.dto",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentials.dto.ts",{"_index":63,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:24",{"_index":71,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:34",{"_index":74,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":445,"title":{},"body":{"modules/V1Module.html":{}}}],["declarations",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{}}}],["default",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":313,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete(':id",{"_index":300,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted",{"_index":369,"title":{},"body":{"injectables/TasksService.html":{}}}],["deleted.affected",{"_index":371,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetaskbyid",{"_index":292,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(@param('id",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetaskbyid(id",{"_index":299,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":91,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":167,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["development",{"_index":531,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":507,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto/auth",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":266,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["dto/find",{"_index":406,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["dto/get",{"_index":323,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/update",{"_index":321,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e2e",{"_index":542,"title":{},"body":{"index.html":{}}}],["eager",{"_index":248,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["efficient",{"_index":516,"title":{},"body":{"index.html":{}}}],["email",{"_index":65,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["email.dto",{"_index":407,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["email.dto.ts",{"_index":182,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["email.dto.ts:17",{"_index":183,"title":{},"body":{"classes/FindUserByEmailDto.html":{}}}],["email_validation_message",{"_index":70,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["email_validation_regex",{"_index":81,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entities_entries",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":250,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entity('tasks",{"_index":253,"title":{},"body":{"classes/Task.html":{}}}],["entity('users",{"_index":390,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":264,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":268,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":410,"title":{},"body":{"classes/UserRepository.html":{}}}],["entitysubscriberinterface",{"_index":277,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["enumerations",{"_index":500,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/task",{"_index":203,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["error",{"_index":418,"title":{},"body":{"classes/UserRepository.html":{}}}],["event",{"_index":283,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["event.entity.status",{"_index":287,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["eventsubscriber",{"_index":286,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["executioncontext",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exists",{"_index":422,"title":{},"body":{"classes/UserRepository.html":{}}}],["export",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["exports",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["express",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":209,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{}}}],["filter.dto",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":193,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":200,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:15",{"_index":197,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["findonebyidanduser",{"_index":259,"title":{},"body":{"classes/TaskRepository.html":{}}}],["findonebyidanduser(id",{"_index":262,"title":{},"body":{"classes/TaskRepository.html":{}}}],["finduserbyemail",{"_index":395,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(finduserbyemaildto",{"_index":399,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["finduserbyemaildto",{"_index":180,"title":{"classes/FindUserByEmailDto.html":{}},"body":{"classes/FindUserByEmailDto.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["framework",{"_index":514,"title":{},"body":{"index.html":{}}}],["function",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":508,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":303,"title":{},"body":{"controllers/TasksController.html":{}}}],["get()@usepipes(validationpipe",{"_index":306,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid",{"_index":293,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(id",{"_index":302,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":294,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(@query",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettasks(gettasksfilterdto",{"_index":305,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksfilterdto",{"_index":190,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":510,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":325,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":548,"title":{},"body":{"index.html":{}}}],["hashpassword",{"_index":396,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":401,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":521,"title":{},"body":{"index.html":{}}}],["here",{"_index":559,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":566,"title":{},"body":{"index.html":{}}}],["id",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":276,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["import",{"_index":31,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["imports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}}}],["in_progress",{"_index":506,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{}}}],["inject",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["injectable",{"_index":124,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":357,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(taskrepository",{"_index":358,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["insertevent",{"_index":281,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["inspired",{"_index":522,"title":{},"body":{"index.html":{}}}],["installation",{"_index":527,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":529,"title":{},"body":{"index.html":{}}}],["interface",{"_index":211,"title":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":212,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":404,"title":{},"body":{"classes/UserRepository.html":{}}}],["invalid",{"_index":189,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["isenum",{"_index":202,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isenum(taskstatus",{"_index":205,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty",{"_index":75,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty()@isenum(taskstatus",{"_index":375,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["isnotempty()@isstring()@matches(email_validation_regex",{"_index":68,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["isnotempty()@isstring()@minlength(4)@maxlength(20",{"_index":177,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@maxlength(20)@matches(password_validation_regex",{"_index":175,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":201,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isenum(taskstatus",{"_index":199,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":196,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isstring",{"_index":76,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@matches(password_validation_regex",{"_index":72,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isvalidpassword",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["join",{"_index":555,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":206,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":443,"title":{},"body":{"modules/V1Module.html":{}}}],["jwtfromrequest",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":137,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtresponse",{"_index":43,"title":{"interfaces/JwtResponse.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["jwtsertive",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":101,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":563,"title":{},"body":{"index.html":{}}}],["legend",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["license",{"_index":569,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":546,"title":{},"body":{"index.html":{}}}],["listento",{"_index":279,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["load",{"_index":450,"title":{},"body":{"modules/V1Module.html":{}}}],["manytoone",{"_index":251,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":246,"title":{},"body":{"classes/Task.html":{}}}],["matches",{"_index":79,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["matching",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":78,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":87,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":69,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{}}}],["metadata",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":77,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":179,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":86,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":499,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":545,"title":{},"body":{"index.html":{}}}],["mode",{"_index":535,"title":{},"body":{"index.html":{}}}],["module",{"_index":88,"title":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["modules",{"_index":90,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":558,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":564,"title":{},"body":{"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":524,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":568,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":36,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":344,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"dependencies.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["node.js",{"_index":513,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":356,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":528,"title":{},"body":{"index.html":{}}}],["number",{"_index":215,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":388,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":383,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":504,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":24,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["overview",{"_index":573,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":476,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":312,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["parseint(error.code",{"_index":419,"title":{},"body":{"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":316,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":66,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["password_validation_message",{"_index":84,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["password_validation_message})@isnotempty",{"_index":73,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["password_validation_regex",{"_index":83,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":314,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id/status')@usepipes(validationpipe",{"_index":310,"title":{},"body":{"controllers/TasksController.html":{}}}],["path.join(__dirname",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":214,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":556,"title":{},"body":{"index.html":{}}}],["post",{"_index":32,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('signin",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin')@usepipes(validationpipe",{"_index":18,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@usepipes(validationpipe",{"_index":29,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(validationpipe",{"_index":297,"title":{},"body":{"controllers/TasksController.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["primarygeneratedcolumn",{"_index":242,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":537,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":512,"title":{},"body":{"index.html":{}}}],["project",{"_index":547,"title":{},"body":{"index.html":{}}}],["promise",{"_index":26,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":64,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"classes/Task.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{}}}],["providers",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["query",{"_index":315,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["query.andwhere('(title",{"_index":361,"title":{},"body":{"injectables/TasksService.html":{}}}],["query.andwhere('status",{"_index":360,"title":{},"body":{"injectables/TasksService.html":{}}}],["query.getmany",{"_index":362,"title":{},"body":{"injectables/TasksService.html":{}}}],["read",{"_index":557,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":257,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}],["response.interface",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.interface.ts",{"_index":216,"title":{},"body":{"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["result",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":25,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":532,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":378,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":517,"title":{},"body":{"index.html":{}}}],["search",{"_index":194,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"injectables/TasksService.html":{}}}],["secretorkey",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":518,"title":{},"body":{"index.html":{}}}],["side",{"_index":519,"title":{},"body":{"index.html":{}}}],["signin",{"_index":12,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcredentials",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":14,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup",{"_index":13,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":27,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/V1Module.html":{},"index.html":{}}}],["sponsors",{"_index":550,"title":{},"body":{"index.html":{}}}],["src/.../database.config.ts",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../email.ts",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../find",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../password.ts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task",{"_index":501,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.repository.ts",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/core/validations/email.ts",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/validations/password.ts",{"_index":460,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/auth/auth.controller.ts",{"_index":6,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/app/v1/auth/auth.controller.ts:19",{"_index":30,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/v1/auth/auth.controller.ts:25",{"_index":20,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/app/v1/auth/auth.module.ts",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/app/v1/auth/auth.service.ts",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/v1/auth/auth.service.ts:14",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:21",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:32",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/auth.service.ts:54",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/v1/auth/decorators/get",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/auth/dto/auth",{"_index":62,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/app/v1/auth/interfaces/jwt",{"_index":213,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.guard.ts",{"_index":207,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.strategy.ts",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/app/v1/auth/jwt.strategy.ts:15",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/v1/auth/jwt.strategy.ts:27",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/app/v1/tasks/dto/create",{"_index":165,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/dto/get",{"_index":191,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/dto/update",{"_index":373,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["src/app/v1/tasks/enums/task",{"_index":503,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/v1/tasks/task.entity.ts",{"_index":238,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.entity.ts:14",{"_index":243,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:17",{"_index":245,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:20",{"_index":241,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:23",{"_index":244,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.entity.ts:26",{"_index":249,"title":{},"body":{"classes/Task.html":{}}}],["src/app/v1/tasks/task.repository.ts",{"_index":256,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.repository.ts:11",{"_index":261,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/app/v1/tasks/task.repository.ts:31",{"_index":263,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/app/v1/tasks/task.subscriber.ts",{"_index":275,"title":{},"body":{"classes/TaskSubscriber.html":{},"coverage.html":{}}}],["src/app/v1/tasks/task.subscriber.ts:11",{"_index":285,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["src/app/v1/tasks/task.subscriber.ts:15",{"_index":282,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["src/app/v1/tasks/tasks.controller.ts",{"_index":290,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:31",{"_index":307,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:36",{"_index":304,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:45",{"_index":298,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:54",{"_index":311,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.controller.ts:63",{"_index":301,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/app/v1/tasks/tasks.module.ts",{"_index":342,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/app/v1/tasks/tasks.service.ts",{"_index":348,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/app/v1/tasks/tasks.service.ts:14",{"_index":350,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:20",{"_index":354,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:41",{"_index":353,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:52",{"_index":351,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:59",{"_index":355,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/tasks/tasks.service.ts:73",{"_index":352,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/app/v1/users/dto/create",{"_index":171,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/app/v1/users/dto/find",{"_index":181,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/users/user.entity.ts",{"_index":377,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/app/v1/users/user.entity.ts:15",{"_index":380,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:18",{"_index":379,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:21",{"_index":386,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:24",{"_index":381,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:27",{"_index":382,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.entity.ts:30",{"_index":385,"title":{},"body":{"classes/User.html":{}}}],["src/app/v1/users/user.repository.ts",{"_index":393,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/v1/users/user.repository.ts:12",{"_index":398,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/user.repository.ts:39",{"_index":400,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/user.repository.ts:47",{"_index":402,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/app/v1/users/users.module.ts",{"_index":427,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/app/v1/users/users.service.ts",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/app/v1/users/users.service.ts:16",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/users/users.service.ts:20",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/users/users.service.ts:9",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/app/v1/v1.module.ts",{"_index":442,"title":{},"body":{"modules/V1Module.html":{}}}],["src/config/database.config.ts",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/jwt.config",{"_index":444,"title":{},"body":{"modules/V1Module.html":{}}}],["src/main.ts",{"_index":472,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":533,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":536,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":538,"title":{},"body":{"index.html":{}}}],["started",{"_index":511,"title":{"index.html":{}},"body":{}}],["starter",{"_index":526,"title":{},"body":{"index.html":{}}}],["statements",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":195,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status.dto",{"_index":322,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["status.dto.ts",{"_index":374,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":376,"title":{},"body":{"classes/UpdateTaskStatusDto.html":{}}}],["status.enum",{"_index":204,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{}}}],["status.enum.ts",{"_index":502,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":560,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":67,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["subscriber.{js,ts",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscribers_entries",{"_index":471,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":551,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":571,"title":{},"body":{"modules.html":{}}}],["table",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":237,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.description",{"_index":270,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.dto",{"_index":267,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":166,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:5",{"_index":170,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:8",{"_index":169,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":265,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.repository",{"_index":345,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":272,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.title",{"_index":269,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.user",{"_index":271,"title":{},"body":{"classes/TaskRepository.html":{},"classes/User.html":{}}}],["taskrepository",{"_index":255,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":192,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":346,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":319,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/task.entity",{"_index":389,"title":{},"body":{"classes/User.html":{}}}],["tasks/tasks.module",{"_index":447,"title":{},"body":{"modules/V1Module.html":{}}}],["taskscontroller",{"_index":289,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":339,"title":{"modules/TasksModule.html":{}},"body":{"modules/TasksModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":318,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":198,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskSubscriber.html":{},"classes/UpdateTaskStatusDto.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.open",{"_index":288,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["tasksubscriber",{"_index":274,"title":{"classes/TaskSubscriber.html":{}},"body":{"classes/TaskSubscriber.html":{},"coverage.html":{}}}],["test",{"_index":541,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":544,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":543,"title":{},"body":{"index.html":{}}}],["tests",{"_index":540,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":549,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createaccesstoken(payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.findone",{"_index":273,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["this.gettaskbyid(id",{"_index":365,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hashpassword(password",{"_index":414,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtsertive.sign(payload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.taskrepository.createquerybuilder",{"_index":359,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.createtaskbyuser(createtaskdto",{"_index":364,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete(id",{"_index":370,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findonebyidanduser(id",{"_index":363,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.merge(task",{"_index":366,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.save(task",{"_index":368,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasks(gettasksfilterdto",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userrepository.createuser(createuserdto",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.finduserbyemail(finduserbyemaildto",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.finduserbyemail",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyemail",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["throw",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["title",{"_index":168,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{}}}],["touch",{"_index":561,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":384,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":415,"title":{},"body":{"classes/UserRepository.html":{}}}],["twitter",{"_index":567,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtResponse.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":252,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskSubscriber.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":343,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":347,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":430,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":451,"title":{},"body":{"modules/V1Module.html":{}}}],["typescript",{"_index":525,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":247,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["unique",{"_index":387,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":391,"title":{},"body":{"classes/User.html":{}}}],["unique_constraint_error_code",{"_index":408,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":539,"title":{},"body":{"index.html":{}}}],["updated",{"_index":367,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskstatus",{"_index":295,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":308,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatusdto",{"_index":309,"title":{"classes/UpdateTaskStatusDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskStatusDto.html":{},"coverage.html":{}}}],["usefactory",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["useguards",{"_index":317,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(jwtauthguard",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes",{"_index":34,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["user",{"_index":149,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/FindUserByEmailDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":327,"title":{},"body":{"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":40,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:24",{"_index":174,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:30",{"_index":178,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":176,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.entity",{"_index":405,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.repository",{"_index":428,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.salt",{"_index":412,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":416,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":254,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":411,"title":{},"body":{"classes/UserRepository.html":{}}}],["username",{"_index":173,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["userrepository",{"_index":392,"title":{"classes/UserRepository.html":{}},"body":{"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.service",{"_index":429,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/create",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/user.entity",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["users/users.module",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/V1Module.html":{}}}],["users/users.service",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userservice",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":100,"title":{"modules/UsersModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":131,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["v1module",{"_index":439,"title":{"modules/V1Module.html":{}},"body":{"modules/V1Module.html":{},"modules.html":{},"overview.html":{}}}],["validate",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":35,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":80,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/FindUserByEmailDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/UpdateTaskStatusDto.html":{},"dependencies.html":{}}}],["value",{"_index":505,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":578,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":284,"title":{},"body":{"classes/TaskSubscriber.html":{}}}],["watch",{"_index":534,"title":{},"body":{"index.html":{}}}],["weak",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":565,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":554,"title":{},"body":{"index.html":{}}}],["z",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":184,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]+)?$/i",{"_index":188,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["z]+\\.([a",{"_index":187,"title":{},"body":{"classes/FindUserByEmailDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules/V1Module.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UsePipes,\n  ValidationPipe\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from '../users/dto/create-user.dto'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { JwtResponse } from './interfaces/jwt-response.interface';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('signup')\n  @UsePipes(ValidationPipe)\n  async signUp(@Body() createUserDto: CreateUserDto): Promise {\n    return this.authService.signUp(createUserDto);\n  }\n\n  @Post('signin')\n  @UsePipes(ValidationPipe)\n  async signIn(@Body() authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signIn(authCredentialsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/auth/dto/auth-credentials.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Matches(PASSWORD_VALIDATION_REGEX, {message: PASSWORD_VALIDATION_MESSAGE})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/auth/dto/auth-credentials.dto.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches\n} from 'class-validator';\nimport {\n  EMAIL_VALIDATION_REGEX,\n  EMAIL_VALIDATION_MESSAGE\n} from '../../../core/validations/email'\nimport {\n  PASSWORD_VALIDATION_REGEX,\n  PASSWORD_VALIDATION_MESSAGE\n} from '../../../core/validations/password'\n\nexport class AuthCredentialsDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(\n    PASSWORD_VALIDATION_REGEX,\n    { message: PASSWORD_VALIDATION_MESSAGE }\n  )\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport {\n  ConfigService,\n  ConfigModule\n} from '@nestjs/config';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => (\n        configService.get('jwt')\n      ),\n      inject: [ConfigService],\n      imports: [ConfigModule]\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createAccessToken\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtSertive: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtSertive\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            createAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccessToken(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentials: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentials\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport {\n  Injectable,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { CreateUserDto } from '../users/dto/create-user.dto';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\nimport { JwtResponse } from './interfaces/jwt-response.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UsersService,\n    private jwtSertive: JwtService\n  ) {\n  }\n\n  async signUp(createUserDto: CreateUserDto): Promise {\n    const user = await this.userService.createUser(createUserDto);\n\n    const payload: JwtPayload = {\n      id: user.id,\n      email: user.email\n    };\n\n    return this.createAccessToken(payload);\n  }\n\n  async signIn(authCredentials: AuthCredentialsDto): Promise {\n    const {\n      email,\n      password\n    } = authCredentials\n\n    const user = await this.userService.findUserByEmail({ email });\n\n    if (!user) throw new UnauthorizedException();\n\n    const isValidPassword = await bcrypt.compare(password, user.password)\n\n    if (!isValidPassword) throw new UnauthorizedException();\n\n    const payload: JwtPayload = {\n      id: user.id,\n      email: user.email\n    };\n\n    return this.createAccessToken(payload);\n  }\n\n  private async createAccessToken(payload: JwtPayload): Promise {\n    const accessToken: string = await this.jwtSertive.sign(payload);\n\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/create-task.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/create-task.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  title: string;\n\n  @IsNotEmpty()\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(PASSWORD_VALIDATION_REGEX, {message: PASSWORD_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/create-user.dto.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches\n} from 'class-validator';\nimport {\n  EMAIL_VALIDATION_REGEX,\n  EMAIL_VALIDATION_MESSAGE\n} from '../../../core/validations/email'\nimport {\n  PASSWORD_VALIDATION_REGEX,\n  PASSWORD_VALIDATION_MESSAGE\n} from '../../../core/validations/password'\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(\n    PASSWORD_VALIDATION_REGEX,\n    { message: PASSWORD_VALIDATION_MESSAGE }\n  )\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserByEmailDto.html":{"url":"classes/FindUserByEmailDto.html","title":"class - FindUserByEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserByEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/dto/find-user-by-email.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches(EMAIL_VALIDATION_REGEX, {message: EMAIL_VALIDATION_MESSAGE})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/dto/find-user-by-email.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  Matches\n} from 'class-validator';\n\nexport const EMAIL_VALIDATION_REGEX = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i\nexport const EMAIL_VALIDATION_MESSAGE = 'invalid email'\n\nexport class FindUserByEmailDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches(\n    EMAIL_VALIDATION_REGEX,\n    { message: EMAIL_VALIDATION_MESSAGE }\n  )\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/get-tasks-filter.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/get-tasks-filter.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsEnum,\n  IsNotEmpty\n} from 'class-validator';\nimport { TaskStatus } from '../enums/task-status.enum';\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n\n  @IsOptional()\n  @IsNotEmpty()\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  id: number,\n  email: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtResponse.html":{"url":"interfaces/JwtResponse.html","title":"interface - JwtResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/interfaces/jwt-response.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtResponse {\n  accessToken: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/auth/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/auth/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Strategy,\n  ExtractJwt\n} from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport {\n  Injectable\n} from '@nestjs/common';\nimport { User } from '../users/user.entity'\nimport { UsersService } from '../users/users.service'\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private usersService: UsersService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('jwt').secret\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload\n\n    const user = await this.usersService.findUserByEmail({ email });\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/task.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne\n} from 'typeorm';\nimport { User } from '../users/user.entity';\nimport { TaskStatus } from './enums/task-status.enum';\n\n@Entity('tasks')\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  status: TaskStatus;\n\n  @ManyToOne(() => User, user => user.tasks, { eager: false })\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTaskByUser\n                            \n                            \n                                    Async\n                                findOneByIdAndUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTaskByUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTaskByUser(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByIdAndUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByIdAndUser(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.repository.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Repository,\n  EntityRepository\n} from 'typeorm';\nimport { User } from '../users/user.entity';\nimport { Task } from './task.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n  async createTaskByUser(\n    createTaskDto: CreateTaskDto,\n    user: User\n  ): Promise {\n    const {\n      title,\n      description\n    } = createTaskDto;\n\n    const task = new Task();\n\n    task.title = title;\n    task.description = description;\n    task.user = user;\n\n    await task.save();\n\n    return task;\n  }\n\n  async findOneByIdAndUser(\n    id: number,\n    user: User\n  ): Promise {\n    return this.findOne({ id, user })\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskSubscriber.html":{"url":"classes/TaskSubscriber.html","title":"class - TaskSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/task.subscriber.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beforeInsert\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            beforeInsert\n                        \n                        \n                    \n                \n            \n            \n                \nbeforeInsert(event: InsertEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.subscriber.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                InsertEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listenTo\n                        \n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/task.subscriber.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  EntitySubscriberInterface,\n  InsertEvent,\n  EventSubscriber\n} from 'typeorm';\nimport { Task } from './task.entity';\nimport { TaskStatus } from './enums/task-status.enum';\n\n@EventSubscriber()\nexport class TaskSubscriber implements EntitySubscriberInterface {\n  listenTo() {\n    return Task;\n  }\n\n  beforeInsert(event: InsertEvent): void {\n    event.entity.status = TaskStatus.OPEN;\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(getTasksFilterDto: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getTasksFilterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, updateTaskStatusDto: UpdateTaskStatusDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskStatusDto\n                                    \n                                                UpdateTaskStatusDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Patch,\n  Query,\n  UsePipes,\n  ValidationPipe,\n  ParseIntPipe,\n  UseGuards\n} from '@nestjs/common';\nimport { User } from '../users/user.entity';\nimport { Task } from './task.entity';\nimport { TasksService } from './tasks.service';\nimport { JwtAuthGuard } from '../auth/jwt.guard';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { GetUser } from '../auth/decorators/get-user.decorator';\n\n\n@Controller('tasks')\n@UseGuards(JwtAuthGuard)\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Get()\n  @UsePipes(ValidationPipe)\n  getTasks(@Query() getTasksFilterDto: GetTasksFilterDto): Promise {\n    return this.tasksService.getTasks(getTasksFilterDto);\n  }\n\n  @Get(':id')\n  getTaskById(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.getTaskById(id, user);\n  }\n\n  @Post()\n  @UsePipes(ValidationPipe)\n  createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.createTask(createTaskDto, user);\n  }\n\n  @Patch(':id/status')\n  @UsePipes(ValidationPipe)\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateTaskStatusDto: UpdateTaskStatusDto,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, updateTaskStatusDto, user);\n  }\n\n  @Delete(':id')\n  deleteTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.deleteTaskById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './task.repository';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository])\n  ],\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/tasks/tasks.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(getTasksFilterDto: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getTasksFilterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, updateTaskStatusDto: UpdateTaskStatusDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/tasks/tasks.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskStatusDto\n                                    \n                                                UpdateTaskStatusDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../users/user.entity';\nimport { TaskRepository } from './task.repository';\nimport { Task } from './task.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskStatusDto } from './dto/update-task-status.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository\n  ) {}\n\n  async getTasks(getTasksFilterDto: GetTasksFilterDto): Promise {\n    const {\n      status,\n      search\n    } = getTasksFilterDto\n\n    const query = this.taskRepository.createQueryBuilder();\n\n    if (status) {\n      query.andWhere('status = :status', { status })\n    }\n\n    if (search) {\n      query.andWhere('(title LIKE :search OR description LIKE :search)', { search: `%${search}%` })\n    }\n\n    const tasks = await query.getMany();\n\n    return tasks;\n  }\n\n  async getTaskById(\n    id: number,\n    user: User\n  ): Promise {\n    const task = await this.taskRepository.findOneByIdAndUser(id, user);\n\n    if (!task) throw new NotFoundException();\n\n    return task;\n  }\n\n  async createTask(\n    createTaskDto: CreateTaskDto,\n    user: User\n  ): Promise {\n    return await this.taskRepository.createTaskByUser(createTaskDto, user);\n  }\n\n  async updateTaskStatus(\n    id: number,\n    updateTaskStatusDto: UpdateTaskStatusDto,\n    user: User\n  ): Promise {\n    const task: Task = await this.getTaskById(id, user);\n\n    this.taskRepository.merge(task, updateTaskStatusDto);\n\n    const updated = await this.taskRepository.save(task);\n\n    return updated;\n  }\n\n  async deleteTaskById(id: number): Promise {\n    const deleted = await this.taskRepository.delete(id)\n\n    if (deleted.affected === 0) throw new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskStatusDto.html":{"url":"classes/UpdateTaskStatusDto.html","title":"class - UpdateTaskStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/tasks/dto/update-task-status.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(TaskStatus)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/tasks/dto/update-task-status.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsEnum\n} from 'class-validator';\nimport { TaskStatus } from '../enums/task-status.enum';\n\nexport class UpdateTaskStatusDto {\n  @IsNotEmpty()\n  @IsEnum(TaskStatus)\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/v1/users/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Unique,\n  OneToMany\n} from 'typeorm';\nimport { Task } from '../tasks/task.entity';\n\n@Entity('users')\n@Unique(['email'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(() => Task, task => task.user, { eager: true })\n  tasks: Task[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(findUserByEmailDto: FindUserByEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findUserByEmailDto\n                                    \n                                                FindUserByEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/user.repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport { Repository, EntityRepository } from 'typeorm';\nimport { ConflictException, InternalServerErrorException } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { FindUserByEmailDto } from './dto/find-user-by-email.dto';\n\nexport const UNIQUE_CONSTRAINT_ERROR_CODE = 23505\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const {\n      email,\n      username,\n      password\n    } = createUserDto;\n\n    const user = new User();\n\n    user.username = username;\n    user.email = email;\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save();\n    } catch (error) {\n      if (parseInt(error.code) === UNIQUE_CONSTRAINT_ERROR_CODE) {\n        throw new ConflictException('Email already exists');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n\n    return user;\n  }\n\n  async findUserByEmail(findUserByEmailDto: FindUserByEmailDto): Promise {\n    const { email } = findUserByEmailDto;\n\n    const user = await this.findOne({ email });\n\n    return user;\n  }\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './user.repository';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/v1/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/app/v1/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(findUserByEmailDto: FindUserByEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/app/v1/users/users.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findUserByEmailDto\n                                    \n                                                FindUserByEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserRepository } from './user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity'\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { FindUserByEmailDto } from './dto/find-user-by-email.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository\n  ) {\n  }\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    return this.userRepository.createUser(createUserDto);\n  }\n\n  async findUserByEmail(findUserByEmailDto: FindUserByEmailDto): Promise {\n    return this.userRepository.findUserByEmail(findUserByEmailDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/V1Module.html":{"url":"modules/V1Module.html","title":"module - V1Module","body":"\n                   \n\n\n\n\n    Modules\n    V1Module\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_V1Module\n\n\n\ncluster_V1Module_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nV1Module\n\nV1Module\n\nV1Module -->\n\nAuthModule->V1Module\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nV1Module -->\n\nTasksModule->V1Module\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nV1Module -->\n\nUsersModule->V1Module\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/v1/v1.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {\n  ConfigModule,\n  ConfigService\n} from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport jwtConfig from 'src/config/jwt.config';\nimport databaseConfig from '../../config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        databaseConfig,\n        jwtConfig\n      ]\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => (\n        configService.get('database')\n      ),\n      inject: [ConfigService]\n    }),\n    TasksModule,\n    AuthModule,\n    UsersModule\n  ],\n})\nexport class V1Module {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/core/validations/email.ts\n            \n            variable\n            EMAIL_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/email.ts\n            \n            variable\n            EMAIL_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/password.ts\n            \n            variable\n            PASSWORD_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/validations/password.ts\n            \n            variable\n            PASSWORD_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/v1/auth/decorators/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/auth/interfaces/jwt-response.interface.ts\n            \n            interface\n            JwtResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/auth/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/dto/update-task-status.dto.ts\n            \n            class\n            UpdateTaskStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/task.subscriber.ts\n            \n            class\n            TaskSubscriber\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/v1/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            class\n            FindUserByEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            variable\n            EMAIL_VALIDATION_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/dto/find-user-by-email.dto.ts\n            \n            variable\n            EMAIL_VALIDATION_REGEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/v1/users/user.repository.ts\n            \n            variable\n            UNIQUE_CONSTRAINT_ERROR_CODE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/v1/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            ENTITIES_ENTRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            variable\n            SUBSCRIBERS_ENTRIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.2.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/v1/tasks/enums/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        V1Module\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_V1Module\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nV1Module\n\nV1Module\n\nV1Module -->\n\nUsersModule->V1Module\n\n\n\nV1Module -->\n\nAuthModule->V1Module\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\nV1Module -->\n\nTasksModule->V1Module\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EMAIL_VALIDATION_MESSAGE   (src/.../email.ts)\n                        \n                        \n                            EMAIL_VALIDATION_MESSAGE   (src/.../find-user-by-email.dto.ts)\n                        \n                        \n                            EMAIL_VALIDATION_REGEX   (src/.../email.ts)\n                        \n                        \n                            EMAIL_VALIDATION_REGEX   (src/.../find-user-by-email.dto.ts)\n                        \n                        \n                            ENTITIES_ENTRIES   (src/.../database.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            PASSWORD_VALIDATION_MESSAGE   (src/.../password.ts)\n                        \n                        \n                            PASSWORD_VALIDATION_REGEX   (src/.../password.ts)\n                        \n                        \n                            SUBSCRIBERS_ENTRIES   (src/.../database.config.ts)\n                        \n                        \n                            UNIQUE_CONSTRAINT_ERROR_CODE   (src/.../user.repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/validations/email.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invalid email'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/users/dto/find-user-by-email.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invalid email'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EMAIL_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+\\.([a-z]+)?$/i\n                        \n                    \n\n\n            \n        \n\n    src/config/database.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ENTITIES_ENTRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : path.join(__dirname, '../**/*.entity.{js,ts}')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SUBSCRIBERS_ENTRIES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : path.join(__dirname, '../**/*.subscriber.{js,ts}')\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/auth/decorators/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((_, ctx: ExecutionContext): User => {\n  const req = ctx.switchToHttp().getRequest();\n\n  return req.user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/app/core/validations/password.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_VALIDATION_MESSAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'password too weak'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PASSWORD_VALIDATION_REGEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : /((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/\n                        \n                    \n\n\n            \n        \n\n    src/app/v1/users/user.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UNIQUE_CONSTRAINT_ERROR_CODE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 23505\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
